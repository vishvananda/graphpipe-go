// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/queue_runner.proto

package for_core_protos_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Protocol buffer representing a QueueRunner.
type QueueRunnerDef struct {
	// Queue name.
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	// A list of enqueue operations.
	EnqueueOpName []string `protobuf:"bytes,2,rep,name=enqueue_op_name,json=enqueueOpName,proto3" json:"enqueue_op_name,omitempty"`
	// The operation to run to close the queue.
	CloseOpName string `protobuf:"bytes,3,opt,name=close_op_name,json=closeOpName,proto3" json:"close_op_name,omitempty"`
	// The operation to run to cancel the queue.
	CancelOpName string `protobuf:"bytes,4,opt,name=cancel_op_name,json=cancelOpName,proto3" json:"cancel_op_name,omitempty"`
	// A list of exception types considered to signal a safely closed queue
	// if raised during enqueue operations.
	QueueClosedExceptionTypes []Code   `protobuf:"varint,5,rep,packed,name=queue_closed_exception_types,json=queueClosedExceptionTypes,proto3,enum=tensorflow.error.Code" json:"queue_closed_exception_types,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *QueueRunnerDef) Reset()         { *m = QueueRunnerDef{} }
func (m *QueueRunnerDef) String() string { return proto.CompactTextString(m) }
func (*QueueRunnerDef) ProtoMessage()    {}
func (*QueueRunnerDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_7af35200d68d14ae, []int{0}
}
func (m *QueueRunnerDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueRunnerDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QueueRunnerDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueRunnerDef.Merge(m, src)
}
func (m *QueueRunnerDef) XXX_Size() int {
	return m.Size()
}
func (m *QueueRunnerDef) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueRunnerDef.DiscardUnknown(m)
}

var xxx_messageInfo_QueueRunnerDef proto.InternalMessageInfo

func (m *QueueRunnerDef) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *QueueRunnerDef) GetEnqueueOpName() []string {
	if m != nil {
		return m.EnqueueOpName
	}
	return nil
}

func (m *QueueRunnerDef) GetCloseOpName() string {
	if m != nil {
		return m.CloseOpName
	}
	return ""
}

func (m *QueueRunnerDef) GetCancelOpName() string {
	if m != nil {
		return m.CancelOpName
	}
	return ""
}

func (m *QueueRunnerDef) GetQueueClosedExceptionTypes() []Code {
	if m != nil {
		return m.QueueClosedExceptionTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*QueueRunnerDef)(nil), "tensorflow.QueueRunnerDef")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/queue_runner.proto", fileDescriptor_7af35200d68d14ae)
}

var fileDescriptor_7af35200d68d14ae = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x59, 0xab, 0x42, 0x57, 0x5b, 0xb1, 0x07, 0xa9, 0xa2, 0xa1, 0x14, 0x91, 0xa2, 0x90,
	0x80, 0xbe, 0x41, 0xab, 0x57, 0xad, 0x41, 0x11, 0xbc, 0x2c, 0xe9, 0x76, 0x12, 0x8b, 0xcd, 0x4e,
	0x9c, 0x4d, 0xa8, 0x3e, 0x8a, 0x6f, 0xe4, 0xd1, 0xa3, 0x47, 0xc9, 0x53, 0x88, 0x27, 0xe9, 0x6c,
	0xb5, 0x45, 0xf4, 0x36, 0xfc, 0x7c, 0xdf, 0xbf, 0xec, 0x8c, 0x3c, 0xca, 0xc1, 0x58, 0xa4, 0x78,
	0x8c, 0x93, 0x40, 0x23, 0x41, 0x90, 0x11, 0xe6, 0x38, 0x28, 0xe2, 0xe0, 0xa1, 0x80, 0x02, 0x14,
	0x15, 0xc6, 0x00, 0xf9, 0x9c, 0x36, 0xe4, 0x1c, 0xde, 0x39, 0xfc, 0x57, 0x04, 0x22, 0x24, 0xa5,
	0x71, 0x08, 0xd6, 0x79, 0xed, 0x4f, 0x21, 0xeb, 0x97, 0xd3, 0xba, 0x90, 0xdb, 0x4e, 0x21, 0x6e,
	0xec, 0x49, 0xe9, 0x1e, 0x30, 0x51, 0x0a, 0x4d, 0xd1, 0x12, 0x9d, 0x6a, 0x58, 0xe5, 0xe4, 0x3c,
	0x4a, 0xa1, 0x71, 0x20, 0x37, 0xc0, 0x38, 0x00, 0x33, 0xc7, 0x2c, 0xb5, 0x2a, 0x9d, 0x6a, 0x58,
	0x9b, 0xc5, 0x17, 0x19, 0x73, 0x6d, 0x59, 0xd3, 0x63, 0xb4, 0x73, 0xaa, 0xc2, 0x4d, 0x6b, 0x1c,
	0xce, 0x98, 0x7d, 0x59, 0xd7, 0x91, 0xd1, 0x30, 0xfe, 0x81, 0x96, 0x19, 0x5a, 0x77, 0xe9, 0x8c,
	0xba, 0x91, 0xbb, 0xee, 0x3d, 0x56, 0x87, 0x0a, 0x1e, 0x35, 0x64, 0xf9, 0x08, 0x8d, 0xca, 0x9f,
	0x32, 0xb0, 0xcd, 0x95, 0x56, 0xa5, 0x53, 0x3f, 0xde, 0xf2, 0xe7, 0xdf, 0xf6, 0xf9, 0xa3, 0x7e,
	0x0f, 0x87, 0x10, 0x6e, 0xb3, 0xdb, 0x63, 0xf5, 0xec, 0xdb, 0xbc, 0x9a, 0x8a, 0xdd, 0x67, 0xf1,
	0x52, 0x7a, 0xe2, 0xb5, 0xf4, 0xc4, 0x5b, 0xe9, 0x89, 0xf7, 0xd2, 0x13, 0xb2, 0x89, 0x94, 0x2c,
	0x16, 0xc5, 0x14, 0xa5, 0x30, 0x41, 0xba, 0xef, 0x6e, 0x2e, 0xac, 0xa9, 0x3f, 0xdd, 0x9d, 0xed,
	0x8b, 0xdb, 0xeb, 0x64, 0x94, 0xdf, 0x15, 0x03, 0x5f, 0x63, 0x1a, 0x2c, 0x6c, 0xfd, 0xef, 0x31,
	0xc1, 0x5f, 0xe7, 0x88, 0xf9, 0x18, 0x04, 0x8a, 0x13, 0xab, 0x12, 0x74, 0xd3, 0x87, 0x10, 0x83,
	0x55, 0x9e, 0x4e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xb7, 0x89, 0x95, 0x06, 0x02, 0x00,
	0x00,
}

func (m *QueueRunnerDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueRunnerDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueRunnerDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueueClosedExceptionTypes) > 0 {
		dAtA2 := make([]byte, len(m.QueueClosedExceptionTypes)*10)
		var j1 int
		for _, num := range m.QueueClosedExceptionTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQueueRunner(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CancelOpName) > 0 {
		i -= len(m.CancelOpName)
		copy(dAtA[i:], m.CancelOpName)
		i = encodeVarintQueueRunner(dAtA, i, uint64(len(m.CancelOpName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CloseOpName) > 0 {
		i -= len(m.CloseOpName)
		copy(dAtA[i:], m.CloseOpName)
		i = encodeVarintQueueRunner(dAtA, i, uint64(len(m.CloseOpName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EnqueueOpName) > 0 {
		for iNdEx := len(m.EnqueueOpName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnqueueOpName[iNdEx])
			copy(dAtA[i:], m.EnqueueOpName[iNdEx])
			i = encodeVarintQueueRunner(dAtA, i, uint64(len(m.EnqueueOpName[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.QueueName) > 0 {
		i -= len(m.QueueName)
		copy(dAtA[i:], m.QueueName)
		i = encodeVarintQueueRunner(dAtA, i, uint64(len(m.QueueName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueueRunner(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueueRunner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueRunnerDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueueName)
	if l > 0 {
		n += 1 + l + sovQueueRunner(uint64(l))
	}
	if len(m.EnqueueOpName) > 0 {
		for _, s := range m.EnqueueOpName {
			l = len(s)
			n += 1 + l + sovQueueRunner(uint64(l))
		}
	}
	l = len(m.CloseOpName)
	if l > 0 {
		n += 1 + l + sovQueueRunner(uint64(l))
	}
	l = len(m.CancelOpName)
	if l > 0 {
		n += 1 + l + sovQueueRunner(uint64(l))
	}
	if len(m.QueueClosedExceptionTypes) > 0 {
		l = 0
		for _, e := range m.QueueClosedExceptionTypes {
			l += sovQueueRunner(uint64(e))
		}
		n += 1 + sovQueueRunner(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovQueueRunner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueueRunner(x uint64) (n int) {
	return sovQueueRunner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueueRunnerDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueueRunner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueRunnerDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueRunnerDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueRunner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueueRunner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueueRunner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnqueueOpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueRunner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueueRunner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueueRunner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnqueueOpName = append(m.EnqueueOpName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseOpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueRunner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueueRunner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueueRunner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloseOpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueRunner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueueRunner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueueRunner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelOpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v Code
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueueRunner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Code(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.QueueClosedExceptionTypes = append(m.QueueClosedExceptionTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueueRunner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQueueRunner
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQueueRunner
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.QueueClosedExceptionTypes) == 0 {
					m.QueueClosedExceptionTypes = make([]Code, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Code
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQueueRunner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Code(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.QueueClosedExceptionTypes = append(m.QueueClosedExceptionTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueClosedExceptionTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueueRunner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueueRunner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueueRunner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueueRunner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueueRunner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueueRunner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueueRunner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueueRunner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueueRunner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueueRunner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueueRunner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueueRunner = fmt.Errorf("proto: unexpected end of group")
)
