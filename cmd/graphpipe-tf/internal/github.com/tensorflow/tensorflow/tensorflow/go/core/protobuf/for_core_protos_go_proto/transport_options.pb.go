// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/transport_options.proto

package for_core_protos_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Extra data needed on a non-RDMA RecvBufResponse.
type RecvBufRespExtra struct {
	TensorContent        [][]byte `protobuf:"bytes,1,rep,name=tensor_content,json=tensorContent,proto3" json:"tensor_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecvBufRespExtra) Reset()         { *m = RecvBufRespExtra{} }
func (m *RecvBufRespExtra) String() string { return proto.CompactTextString(m) }
func (*RecvBufRespExtra) ProtoMessage()    {}
func (*RecvBufRespExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_527891df7bab7653, []int{0}
}
func (m *RecvBufRespExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecvBufRespExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecvBufRespExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvBufRespExtra.Merge(m, src)
}
func (m *RecvBufRespExtra) XXX_Size() int {
	return m.Size()
}
func (m *RecvBufRespExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvBufRespExtra.DiscardUnknown(m)
}

var xxx_messageInfo_RecvBufRespExtra proto.InternalMessageInfo

func (m *RecvBufRespExtra) GetTensorContent() [][]byte {
	if m != nil {
		return m.TensorContent
	}
	return nil
}

func init() {
	proto.RegisterType((*RecvBufRespExtra)(nil), "tensorflow.RecvBufRespExtra")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/transport_options.proto", fileDescriptor_527891df7bab7653)
}

var fileDescriptor_527891df7bab7653 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x28, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0xd7, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x29, 0x4a, 0xcc, 0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0x89, 0xcf,
	0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x2b, 0xd6, 0x03, 0x4b, 0x09, 0x71, 0x21, 0x74, 0x28, 0x59, 0x72,
	0x09, 0x04, 0xa5, 0x26, 0x97, 0x39, 0x95, 0xa6, 0x05, 0xa5, 0x16, 0x17, 0xb8, 0x56, 0x94, 0x14,
	0x25, 0x0a, 0xa9, 0x72, 0xf1, 0x41, 0x54, 0xc4, 0x27, 0xe7, 0xe7, 0x95, 0xa4, 0xe6, 0x95, 0x48,
	0x30, 0x2a, 0x30, 0x6b, 0xf0, 0x04, 0xf1, 0x42, 0x44, 0x9d, 0x21, 0x82, 0x4e, 0xe9, 0x27, 0x1e,
	0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0x78, 0xe3, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x51,
	0xa1, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x48, 0xae, 0xc2, 0xce,
	0x4c, 0xcf, 0x47, 0x73, 0x6e, 0x1a, 0xd8, 0xc2, 0xa2, 0xd4, 0x78, 0xb0, 0x48, 0x71, 0x7c, 0x7a,
	0x3e, 0x84, 0x95, 0xc4, 0x06, 0xa6, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x46, 0x63, 0x83,
	0x81, 0xea, 0x00, 0x00, 0x00,
}

func (m *RecvBufRespExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvBufRespExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecvBufRespExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TensorContent) > 0 {
		for iNdEx := len(m.TensorContent) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TensorContent[iNdEx])
			copy(dAtA[i:], m.TensorContent[iNdEx])
			i = encodeVarintTransportOptions(dAtA, i, uint64(len(m.TensorContent[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransportOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransportOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecvBufRespExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TensorContent) > 0 {
		for _, b := range m.TensorContent {
			l = len(b)
			n += 1 + l + sovTransportOptions(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransportOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransportOptions(x uint64) (n int) {
	return sovTransportOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecvBufRespExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransportOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvBufRespExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvBufRespExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransportOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransportOptions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransportOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorContent = append(m.TensorContent, make([]byte, postIndex-iNdEx))
			copy(m.TensorContent[len(m.TensorContent)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransportOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransportOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransportOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransportOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransportOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransportOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransportOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransportOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransportOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransportOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransportOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransportOptions = fmt.Errorf("proto: unexpected end of group")
)
