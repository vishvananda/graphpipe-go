// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/replay_log.proto

package for_core_protos_go_proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Records the creation of a new replay session.  We record the device listing
// here to capture the state of the cluster.
type NewReplaySession struct {
	Devices              *ListDevicesResponse `protobuf:"bytes,1,opt,name=devices,proto3" json:"devices,omitempty"`
	SessionHandle        string               `protobuf:"bytes,2,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NewReplaySession) Reset()         { *m = NewReplaySession{} }
func (m *NewReplaySession) String() string { return proto.CompactTextString(m) }
func (*NewReplaySession) ProtoMessage()    {}
func (*NewReplaySession) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee59cdea95caad8, []int{0}
}
func (m *NewReplaySession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewReplaySession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NewReplaySession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewReplaySession.Merge(m, src)
}
func (m *NewReplaySession) XXX_Size() int {
	return m.Size()
}
func (m *NewReplaySession) XXX_DiscardUnknown() {
	xxx_messageInfo_NewReplaySession.DiscardUnknown(m)
}

var xxx_messageInfo_NewReplaySession proto.InternalMessageInfo

func (m *NewReplaySession) GetDevices() *ListDevicesResponse {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *NewReplaySession) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

type ReplayOp struct {
	StartTimeUs float64 `protobuf:"fixed64,31,opt,name=start_time_us,json=startTimeUs,proto3" json:"start_time_us,omitempty"`
	EndTimeUs   float64 `protobuf:"fixed64,32,opt,name=end_time_us,json=endTimeUs,proto3" json:"end_time_us,omitempty"`
	// Types that are valid to be assigned to Op:
	//	*ReplayOp_CreateSession
	//	*ReplayOp_ExtendSession
	//	*ReplayOp_PartialRunSetup
	//	*ReplayOp_RunStep
	//	*ReplayOp_CloseSession
	//	*ReplayOp_ListDevices
	//	*ReplayOp_ResetRequest
	//	*ReplayOp_MakeCallable
	//	*ReplayOp_RunCallable
	//	*ReplayOp_ReleaseCallable
	//	*ReplayOp_NewReplaySession
	Op isReplayOp_Op `protobuf_oneof:"op"`
	// Types that are valid to be assigned to Response:
	//	*ReplayOp_CreateSessionResponse
	//	*ReplayOp_ExtendSessionResponse
	//	*ReplayOp_PartialRunSetupResponse
	//	*ReplayOp_RunStepResponse
	//	*ReplayOp_CloseSessionResponse
	//	*ReplayOp_ListDevicesResponse
	//	*ReplayOp_ResetRequestResponse
	//	*ReplayOp_MakeCallableResponse
	//	*ReplayOp_RunCallableResponse
	//	*ReplayOp_ReleaseCallableResponse
	Response             isReplayOp_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReplayOp) Reset()         { *m = ReplayOp{} }
func (m *ReplayOp) String() string { return proto.CompactTextString(m) }
func (*ReplayOp) ProtoMessage()    {}
func (*ReplayOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee59cdea95caad8, []int{1}
}
func (m *ReplayOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplayOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplayOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplayOp.Merge(m, src)
}
func (m *ReplayOp) XXX_Size() int {
	return m.Size()
}
func (m *ReplayOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplayOp.DiscardUnknown(m)
}

var xxx_messageInfo_ReplayOp proto.InternalMessageInfo

type isReplayOp_Op interface {
	isReplayOp_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplayOp_Response interface {
	isReplayOp_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplayOp_CreateSession struct {
	CreateSession *CreateSessionRequest `protobuf:"bytes,1,opt,name=create_session,json=createSession,proto3,oneof" json:"create_session,omitempty"`
}
type ReplayOp_ExtendSession struct {
	ExtendSession *ExtendSessionRequest `protobuf:"bytes,2,opt,name=extend_session,json=extendSession,proto3,oneof" json:"extend_session,omitempty"`
}
type ReplayOp_PartialRunSetup struct {
	PartialRunSetup *PartialRunSetupRequest `protobuf:"bytes,3,opt,name=partial_run_setup,json=partialRunSetup,proto3,oneof" json:"partial_run_setup,omitempty"`
}
type ReplayOp_RunStep struct {
	RunStep *RunStepRequest `protobuf:"bytes,4,opt,name=run_step,json=runStep,proto3,oneof" json:"run_step,omitempty"`
}
type ReplayOp_CloseSession struct {
	CloseSession *CloseSessionRequest `protobuf:"bytes,5,opt,name=close_session,json=closeSession,proto3,oneof" json:"close_session,omitempty"`
}
type ReplayOp_ListDevices struct {
	ListDevices *ListDevicesRequest `protobuf:"bytes,6,opt,name=list_devices,json=listDevices,proto3,oneof" json:"list_devices,omitempty"`
}
type ReplayOp_ResetRequest struct {
	ResetRequest *ResetRequest `protobuf:"bytes,7,opt,name=reset_request,json=resetRequest,proto3,oneof" json:"reset_request,omitempty"`
}
type ReplayOp_MakeCallable struct {
	MakeCallable *MakeCallableRequest `protobuf:"bytes,8,opt,name=make_callable,json=makeCallable,proto3,oneof" json:"make_callable,omitempty"`
}
type ReplayOp_RunCallable struct {
	RunCallable *RunCallableRequest `protobuf:"bytes,9,opt,name=run_callable,json=runCallable,proto3,oneof" json:"run_callable,omitempty"`
}
type ReplayOp_ReleaseCallable struct {
	ReleaseCallable *ReleaseCallableRequest `protobuf:"bytes,10,opt,name=release_callable,json=releaseCallable,proto3,oneof" json:"release_callable,omitempty"`
}
type ReplayOp_NewReplaySession struct {
	NewReplaySession *NewReplaySession `protobuf:"bytes,11,opt,name=new_replay_session,json=newReplaySession,proto3,oneof" json:"new_replay_session,omitempty"`
}
type ReplayOp_CreateSessionResponse struct {
	CreateSessionResponse *CreateSessionResponse `protobuf:"bytes,21,opt,name=create_session_response,json=createSessionResponse,proto3,oneof" json:"create_session_response,omitempty"`
}
type ReplayOp_ExtendSessionResponse struct {
	ExtendSessionResponse *ExtendSessionResponse `protobuf:"bytes,22,opt,name=extend_session_response,json=extendSessionResponse,proto3,oneof" json:"extend_session_response,omitempty"`
}
type ReplayOp_PartialRunSetupResponse struct {
	PartialRunSetupResponse *PartialRunSetupResponse `protobuf:"bytes,23,opt,name=partial_run_setup_response,json=partialRunSetupResponse,proto3,oneof" json:"partial_run_setup_response,omitempty"`
}
type ReplayOp_RunStepResponse struct {
	RunStepResponse *RunStepResponse `protobuf:"bytes,24,opt,name=run_step_response,json=runStepResponse,proto3,oneof" json:"run_step_response,omitempty"`
}
type ReplayOp_CloseSessionResponse struct {
	CloseSessionResponse *CloseSessionResponse `protobuf:"bytes,25,opt,name=close_session_response,json=closeSessionResponse,proto3,oneof" json:"close_session_response,omitempty"`
}
type ReplayOp_ListDevicesResponse struct {
	ListDevicesResponse *ListDevicesResponse `protobuf:"bytes,26,opt,name=list_devices_response,json=listDevicesResponse,proto3,oneof" json:"list_devices_response,omitempty"`
}
type ReplayOp_ResetRequestResponse struct {
	ResetRequestResponse *ResetResponse `protobuf:"bytes,27,opt,name=reset_request_response,json=resetRequestResponse,proto3,oneof" json:"reset_request_response,omitempty"`
}
type ReplayOp_MakeCallableResponse struct {
	MakeCallableResponse *MakeCallableResponse `protobuf:"bytes,28,opt,name=make_callable_response,json=makeCallableResponse,proto3,oneof" json:"make_callable_response,omitempty"`
}
type ReplayOp_RunCallableResponse struct {
	RunCallableResponse *RunCallableResponse `protobuf:"bytes,29,opt,name=run_callable_response,json=runCallableResponse,proto3,oneof" json:"run_callable_response,omitempty"`
}
type ReplayOp_ReleaseCallableResponse struct {
	ReleaseCallableResponse *ReleaseCallableResponse `protobuf:"bytes,30,opt,name=release_callable_response,json=releaseCallableResponse,proto3,oneof" json:"release_callable_response,omitempty"`
}

func (*ReplayOp_CreateSession) isReplayOp_Op()                 {}
func (*ReplayOp_ExtendSession) isReplayOp_Op()                 {}
func (*ReplayOp_PartialRunSetup) isReplayOp_Op()               {}
func (*ReplayOp_RunStep) isReplayOp_Op()                       {}
func (*ReplayOp_CloseSession) isReplayOp_Op()                  {}
func (*ReplayOp_ListDevices) isReplayOp_Op()                   {}
func (*ReplayOp_ResetRequest) isReplayOp_Op()                  {}
func (*ReplayOp_MakeCallable) isReplayOp_Op()                  {}
func (*ReplayOp_RunCallable) isReplayOp_Op()                   {}
func (*ReplayOp_ReleaseCallable) isReplayOp_Op()               {}
func (*ReplayOp_NewReplaySession) isReplayOp_Op()              {}
func (*ReplayOp_CreateSessionResponse) isReplayOp_Response()   {}
func (*ReplayOp_ExtendSessionResponse) isReplayOp_Response()   {}
func (*ReplayOp_PartialRunSetupResponse) isReplayOp_Response() {}
func (*ReplayOp_RunStepResponse) isReplayOp_Response()         {}
func (*ReplayOp_CloseSessionResponse) isReplayOp_Response()    {}
func (*ReplayOp_ListDevicesResponse) isReplayOp_Response()     {}
func (*ReplayOp_ResetRequestResponse) isReplayOp_Response()    {}
func (*ReplayOp_MakeCallableResponse) isReplayOp_Response()    {}
func (*ReplayOp_RunCallableResponse) isReplayOp_Response()     {}
func (*ReplayOp_ReleaseCallableResponse) isReplayOp_Response() {}

func (m *ReplayOp) GetOp() isReplayOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}
func (m *ReplayOp) GetResponse() isReplayOp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ReplayOp) GetStartTimeUs() float64 {
	if m != nil {
		return m.StartTimeUs
	}
	return 0
}

func (m *ReplayOp) GetEndTimeUs() float64 {
	if m != nil {
		return m.EndTimeUs
	}
	return 0
}

func (m *ReplayOp) GetCreateSession() *CreateSessionRequest {
	if x, ok := m.GetOp().(*ReplayOp_CreateSession); ok {
		return x.CreateSession
	}
	return nil
}

func (m *ReplayOp) GetExtendSession() *ExtendSessionRequest {
	if x, ok := m.GetOp().(*ReplayOp_ExtendSession); ok {
		return x.ExtendSession
	}
	return nil
}

func (m *ReplayOp) GetPartialRunSetup() *PartialRunSetupRequest {
	if x, ok := m.GetOp().(*ReplayOp_PartialRunSetup); ok {
		return x.PartialRunSetup
	}
	return nil
}

func (m *ReplayOp) GetRunStep() *RunStepRequest {
	if x, ok := m.GetOp().(*ReplayOp_RunStep); ok {
		return x.RunStep
	}
	return nil
}

func (m *ReplayOp) GetCloseSession() *CloseSessionRequest {
	if x, ok := m.GetOp().(*ReplayOp_CloseSession); ok {
		return x.CloseSession
	}
	return nil
}

func (m *ReplayOp) GetListDevices() *ListDevicesRequest {
	if x, ok := m.GetOp().(*ReplayOp_ListDevices); ok {
		return x.ListDevices
	}
	return nil
}

func (m *ReplayOp) GetResetRequest() *ResetRequest {
	if x, ok := m.GetOp().(*ReplayOp_ResetRequest); ok {
		return x.ResetRequest
	}
	return nil
}

func (m *ReplayOp) GetMakeCallable() *MakeCallableRequest {
	if x, ok := m.GetOp().(*ReplayOp_MakeCallable); ok {
		return x.MakeCallable
	}
	return nil
}

func (m *ReplayOp) GetRunCallable() *RunCallableRequest {
	if x, ok := m.GetOp().(*ReplayOp_RunCallable); ok {
		return x.RunCallable
	}
	return nil
}

func (m *ReplayOp) GetReleaseCallable() *ReleaseCallableRequest {
	if x, ok := m.GetOp().(*ReplayOp_ReleaseCallable); ok {
		return x.ReleaseCallable
	}
	return nil
}

func (m *ReplayOp) GetNewReplaySession() *NewReplaySession {
	if x, ok := m.GetOp().(*ReplayOp_NewReplaySession); ok {
		return x.NewReplaySession
	}
	return nil
}

func (m *ReplayOp) GetCreateSessionResponse() *CreateSessionResponse {
	if x, ok := m.GetResponse().(*ReplayOp_CreateSessionResponse); ok {
		return x.CreateSessionResponse
	}
	return nil
}

func (m *ReplayOp) GetExtendSessionResponse() *ExtendSessionResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ExtendSessionResponse); ok {
		return x.ExtendSessionResponse
	}
	return nil
}

func (m *ReplayOp) GetPartialRunSetupResponse() *PartialRunSetupResponse {
	if x, ok := m.GetResponse().(*ReplayOp_PartialRunSetupResponse); ok {
		return x.PartialRunSetupResponse
	}
	return nil
}

func (m *ReplayOp) GetRunStepResponse() *RunStepResponse {
	if x, ok := m.GetResponse().(*ReplayOp_RunStepResponse); ok {
		return x.RunStepResponse
	}
	return nil
}

func (m *ReplayOp) GetCloseSessionResponse() *CloseSessionResponse {
	if x, ok := m.GetResponse().(*ReplayOp_CloseSessionResponse); ok {
		return x.CloseSessionResponse
	}
	return nil
}

func (m *ReplayOp) GetListDevicesResponse() *ListDevicesResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ListDevicesResponse); ok {
		return x.ListDevicesResponse
	}
	return nil
}

func (m *ReplayOp) GetResetRequestResponse() *ResetResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ResetRequestResponse); ok {
		return x.ResetRequestResponse
	}
	return nil
}

func (m *ReplayOp) GetMakeCallableResponse() *MakeCallableResponse {
	if x, ok := m.GetResponse().(*ReplayOp_MakeCallableResponse); ok {
		return x.MakeCallableResponse
	}
	return nil
}

func (m *ReplayOp) GetRunCallableResponse() *RunCallableResponse {
	if x, ok := m.GetResponse().(*ReplayOp_RunCallableResponse); ok {
		return x.RunCallableResponse
	}
	return nil
}

func (m *ReplayOp) GetReleaseCallableResponse() *ReleaseCallableResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ReleaseCallableResponse); ok {
		return x.ReleaseCallableResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplayOp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplayOp_CreateSession)(nil),
		(*ReplayOp_ExtendSession)(nil),
		(*ReplayOp_PartialRunSetup)(nil),
		(*ReplayOp_RunStep)(nil),
		(*ReplayOp_CloseSession)(nil),
		(*ReplayOp_ListDevices)(nil),
		(*ReplayOp_ResetRequest)(nil),
		(*ReplayOp_MakeCallable)(nil),
		(*ReplayOp_RunCallable)(nil),
		(*ReplayOp_ReleaseCallable)(nil),
		(*ReplayOp_NewReplaySession)(nil),
		(*ReplayOp_CreateSessionResponse)(nil),
		(*ReplayOp_ExtendSessionResponse)(nil),
		(*ReplayOp_PartialRunSetupResponse)(nil),
		(*ReplayOp_RunStepResponse)(nil),
		(*ReplayOp_CloseSessionResponse)(nil),
		(*ReplayOp_ListDevicesResponse)(nil),
		(*ReplayOp_ResetRequestResponse)(nil),
		(*ReplayOp_MakeCallableResponse)(nil),
		(*ReplayOp_RunCallableResponse)(nil),
		(*ReplayOp_ReleaseCallableResponse)(nil),
	}
}

func init() {
	proto.RegisterType((*NewReplaySession)(nil), "tensorflow.NewReplaySession")
	proto.RegisterType((*ReplayOp)(nil), "tensorflow.ReplayOp")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/replay_log.proto", fileDescriptor_9ee59cdea95caad8)
}

var fileDescriptor_9ee59cdea95caad8 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4f, 0x6f, 0xd3, 0x4a,
	0x14, 0xc5, 0xeb, 0xbe, 0xbe, 0x36, 0x9d, 0x34, 0xfd, 0x33, 0xef, 0xb5, 0x75, 0xd3, 0x92, 0x86,
	0xa0, 0x4a, 0x65, 0x93, 0x48, 0xb0, 0x40, 0xac, 0x90, 0x1a, 0x40, 0xa9, 0x54, 0x68, 0x71, 0xa9,
	0x84, 0x60, 0x31, 0x72, 0x9c, 0xdb, 0xd4, 0xd4, 0xf6, 0x98, 0x99, 0x31, 0x85, 0x6f, 0xc8, 0x92,
	0x25, 0x4b, 0x94, 0x4f, 0xc1, 0x82, 0x05, 0xf2, 0xd8, 0xce, 0x8c, 0x33, 0x6e, 0xc5, 0xce, 0x39,
	0xf7, 0xe4, 0x37, 0x73, 0xef, 0xcc, 0xb1, 0xd1, 0x43, 0x01, 0x11, 0xa7, 0xec, 0x32, 0xa0, 0x37,
	0x3d, 0x8f, 0x32, 0xe8, 0xc5, 0x8c, 0x0a, 0x3a, 0x4c, 0x2e, 0x7b, 0x0c, 0xe2, 0xc0, 0xfd, 0x4a,
	0x02, 0x3a, 0xee, 0x4a, 0x0d, 0x23, 0x65, 0x6d, 0x1e, 0xdc, 0xfa, 0xb7, 0xd0, 0xe5, 0x02, 0x58,
	0xf6, 0x97, 0x8e, 0x40, 0xeb, 0xaf, 0xe1, 0xc6, 0x91, 0xa4, 0x73, 0xe0, 0xdc, 0xa7, 0x11, 0x7e,
	0x8a, 0x96, 0x46, 0xf0, 0xd9, 0xf7, 0x80, 0xdb, 0x56, 0xdb, 0x3a, 0xac, 0x3f, 0xda, 0xef, 0x2a,
	0x58, 0xf7, 0xc4, 0xe7, 0xe2, 0x79, 0x56, 0x76, 0x80, 0xc7, 0x34, 0xe2, 0xe0, 0x14, 0x7e, 0x7c,
	0x80, 0x56, 0x79, 0x46, 0x21, 0x57, 0x6e, 0x34, 0x0a, 0xc0, 0x9e, 0x6f, 0x5b, 0x87, 0xcb, 0x4e,
	0x23, 0x57, 0x07, 0x52, 0xec, 0xfc, 0x6e, 0xa0, 0x5a, 0xb6, 0xe6, 0x69, 0x8c, 0x3b, 0xa8, 0xc1,
	0x85, 0xcb, 0x04, 0x11, 0x7e, 0x08, 0x24, 0xe1, 0xf6, 0x7e, 0xdb, 0x3a, 0xb4, 0x9c, 0xba, 0x14,
	0xdf, 0xfa, 0x21, 0x5c, 0x70, 0xdc, 0x42, 0x75, 0x88, 0x46, 0x53, 0x47, 0x5b, 0x3a, 0x96, 0x21,
	0x1a, 0xe5, 0xf5, 0x63, 0xb4, 0xea, 0x31, 0x70, 0x05, 0x90, 0x7c, 0xa1, 0x7c, 0xe7, 0x6d, 0x7d,
	0xe7, 0x7d, 0xe9, 0xc8, 0xbb, 0x74, 0xe0, 0x53, 0x02, 0x5c, 0x0c, 0xe6, 0x9c, 0x86, 0xa7, 0xeb,
	0x29, 0x0a, 0xbe, 0x88, 0x74, 0xb5, 0x02, 0x35, 0x6f, 0xa2, 0x5e, 0x48, 0x87, 0x89, 0x02, 0x5d,
	0xc7, 0x67, 0x68, 0x23, 0x76, 0x99, 0xf0, 0xdd, 0x80, 0xb0, 0x24, 0x22, 0x1c, 0x44, 0x12, 0xdb,
	0xff, 0x48, 0x5a, 0x47, 0xa7, 0x9d, 0x65, 0x26, 0x27, 0x89, 0xce, 0x53, 0x8b, 0xe2, 0xad, 0xc5,
	0xe5, 0x0a, 0x7e, 0x82, 0x6a, 0x92, 0x24, 0x20, 0xb6, 0x17, 0x24, 0xa8, 0xa9, 0x83, 0x52, 0x9f,
	0x00, 0x0d, 0xb0, 0xc4, 0x32, 0x05, 0xbf, 0x44, 0x0d, 0x2f, 0xa0, 0x5c, 0xcd, 0xe7, 0x5f, 0xf3,
	0x64, 0xfb, 0xa9, 0xc1, 0xe8, 0x69, 0xc5, 0xd3, 0x64, 0xdc, 0x47, 0x2b, 0x81, 0xcf, 0x05, 0x29,
	0x2e, 0xc8, 0xa2, 0xc4, 0xb4, 0x6e, 0xbd, 0x20, 0x05, 0xa5, 0x1e, 0x28, 0x15, 0x3f, 0x43, 0x0d,
	0x06, 0x1c, 0x04, 0x61, 0x59, 0xdd, 0x5e, 0x92, 0x14, 0xbb, 0xd4, 0x4a, 0x6a, 0xd0, 0x76, 0xc1,
	0xb4, 0xdf, 0x69, 0x37, 0xa1, 0x7b, 0x0d, 0xc4, 0x73, 0x83, 0xc0, 0x1d, 0x06, 0x60, 0xd7, 0xcc,
	0x6e, 0x5e, 0xb9, 0xd7, 0xd0, 0xcf, 0xeb, 0x1a, 0x27, 0xd4, 0xe4, 0xb4, 0x9b, 0x74, 0x9c, 0x53,
	0xcc, 0xb2, 0xd9, 0x8d, 0x93, 0x44, 0x26, 0xa5, 0xce, 0x94, 0x8a, 0x4f, 0xd1, 0x3a, 0x83, 0x00,
	0x5c, 0xae, 0xed, 0x07, 0x99, 0x87, 0xec, 0x64, 0x1e, 0x13, 0xb6, 0xc6, 0xca, 0x15, 0x7c, 0x82,
	0x70, 0x04, 0x37, 0x24, 0x8f, 0x77, 0x71, 0x60, 0x75, 0x89, 0xdc, 0xd3, 0x91, 0xb3, 0xc9, 0x1d,
	0xcc, 0x39, 0xeb, 0xd1, 0x6c, 0x9a, 0x3f, 0xa0, 0xed, 0x72, 0x34, 0x08, 0xcb, 0x63, 0x6b, 0x6f,
	0x4a, 0xe4, 0xfd, 0x3b, 0x32, 0x92, 0x19, 0x07, 0x96, 0xb3, 0xe9, 0x55, 0x15, 0x52, 0x78, 0x39,
	0x2c, 0x0a, 0xbe, 0x65, 0xc2, 0x67, 0x52, 0xa3, 0xe0, 0x50, 0x55, 0xc0, 0x43, 0xd4, 0x34, 0xe2,
	0xa3, 0xf8, 0xdb, 0x92, 0xff, 0xe0, 0xce, 0x1c, 0x4d, 0x57, 0xd8, 0x8e, 0xab, 0x4b, 0xf8, 0x18,
	0x6d, 0x14, 0x81, 0x52, 0x68, 0x5b, 0xa2, 0x77, 0x2b, 0x93, 0x35, 0x45, 0xae, 0xb1, 0xb2, 0x84,
	0xdf, 0xa1, 0xad, 0x52, 0xc4, 0x14, 0x6f, 0xa7, 0xe2, 0x5d, 0x54, 0xca, 0xda, 0x14, 0xfa, 0xbf,
	0x57, 0xa1, 0xe3, 0x0b, 0xb4, 0xa9, 0x87, 0x4e, 0x81, 0x9b, 0x7f, 0xf5, 0x7a, 0x1e, 0x58, 0xce,
	0x7f, 0x81, 0x29, 0xe3, 0x37, 0x68, 0xab, 0x14, 0x43, 0xc5, 0xdd, 0x95, 0xdc, 0x9d, 0x8a, 0x3c,
	0xaa, 0x9d, 0xea, 0x81, 0xd4, 0x67, 0x50, 0x0a, 0xa6, 0x42, 0xee, 0x99, 0x33, 0x28, 0x27, 0x54,
	0x91, 0xc3, 0x0a, 0x3d, 0x9d, 0x81, 0x1e, 0x55, 0x05, 0xbe, 0x67, 0xce, 0xa0, 0x94, 0x59, 0x35,
	0x03, 0x66, 0xca, 0xd8, 0x45, 0x3b, 0xb3, 0xe1, 0x55, 0xe8, 0x96, 0x79, 0xc5, 0x8c, 0x14, 0xab,
	0x2b, 0xc6, 0xaa, 0x4b, 0x47, 0x0b, 0x68, 0x9e, 0xc6, 0x47, 0x08, 0xd5, 0x0a, 0xee, 0xd1, 0xc7,
	0x6f, 0x93, 0x96, 0xf5, 0x7d, 0xd2, 0xb2, 0x7e, 0x4c, 0x5a, 0xd6, 0xcf, 0x49, 0xcb, 0x7a, 0x7f,
	0x31, 0xf6, 0xc5, 0x55, 0x32, 0xec, 0x7a, 0x34, 0xec, 0x69, 0x1f, 0xee, 0xea, 0xc7, 0x31, 0x9d,
	0xf9, 0xa2, 0x5f, 0x52, 0x46, 0x52, 0x85, 0x48, 0x85, 0x93, 0x31, 0xcd, 0x9e, 0x7e, 0x59, 0xd6,
	0x70, 0x51, 0x3e, 0x3d, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xfa, 0xb2, 0xca, 0x47, 0x08,
	0x00, 0x00,
}

func (m *NewReplaySession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewReplaySession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewReplaySession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SessionHandle) > 0 {
		i -= len(m.SessionHandle)
		copy(dAtA[i:], m.SessionHandle)
		i = encodeVarintReplayLog(dAtA, i, uint64(len(m.SessionHandle)))
		i--
		dAtA[i] = 0x12
	}
	if m.Devices != nil {
		{
			size, err := m.Devices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplayOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplayOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTimeUs != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EndTimeUs))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x81
	}
	if m.StartTimeUs != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StartTimeUs))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf9
	}
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Op != nil {
		{
			size := m.Op.Size()
			i -= size
			if _, err := m.Op.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplayOp_CreateSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_CreateSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateSession != nil {
		{
			size, err := m.CreateSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ExtendSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ExtendSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtendSession != nil {
		{
			size, err := m.ExtendSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_PartialRunSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_PartialRunSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PartialRunSetup != nil {
		{
			size, err := m.PartialRunSetup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_RunStep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_RunStep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RunStep != nil {
		{
			size, err := m.RunStep.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_CloseSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_CloseSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseSession != nil {
		{
			size, err := m.CloseSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ListDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ListDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListDevices != nil {
		{
			size, err := m.ListDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ResetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ResetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResetRequest != nil {
		{
			size, err := m.ResetRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_MakeCallable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_MakeCallable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MakeCallable != nil {
		{
			size, err := m.MakeCallable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_RunCallable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_RunCallable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RunCallable != nil {
		{
			size, err := m.RunCallable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ReleaseCallable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ReleaseCallable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReleaseCallable != nil {
		{
			size, err := m.ReleaseCallable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_NewReplaySession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_NewReplaySession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewReplaySession != nil {
		{
			size, err := m.NewReplaySession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_CreateSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_CreateSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateSessionResponse != nil {
		{
			size, err := m.CreateSessionResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ExtendSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ExtendSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtendSessionResponse != nil {
		{
			size, err := m.ExtendSessionResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_PartialRunSetupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_PartialRunSetupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PartialRunSetupResponse != nil {
		{
			size, err := m.PartialRunSetupResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_RunStepResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_RunStepResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RunStepResponse != nil {
		{
			size, err := m.RunStepResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_CloseSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_CloseSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseSessionResponse != nil {
		{
			size, err := m.CloseSessionResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ListDevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ListDevicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListDevicesResponse != nil {
		{
			size, err := m.ListDevicesResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ResetRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ResetRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResetRequestResponse != nil {
		{
			size, err := m.ResetRequestResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_MakeCallableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_MakeCallableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MakeCallableResponse != nil {
		{
			size, err := m.MakeCallableResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_RunCallableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_RunCallableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RunCallableResponse != nil {
		{
			size, err := m.RunCallableResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplayOp_ReleaseCallableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayOp_ReleaseCallableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReleaseCallableResponse != nil {
		{
			size, err := m.ReleaseCallableResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplayLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func encodeVarintReplayLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovReplayLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewReplaySession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Devices != nil {
		l = m.Devices.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	l = len(m.SessionHandle)
	if l > 0 {
		n += 1 + l + sovReplayLog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplayOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		n += m.Op.Size()
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.StartTimeUs != 0 {
		n += 10
	}
	if m.EndTimeUs != 0 {
		n += 10
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplayOp_CreateSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateSession != nil {
		l = m.CreateSession.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ExtendSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendSession != nil {
		l = m.ExtendSession.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_PartialRunSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartialRunSetup != nil {
		l = m.PartialRunSetup.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_RunStep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunStep != nil {
		l = m.RunStep.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_CloseSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseSession != nil {
		l = m.CloseSession.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ListDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListDevices != nil {
		l = m.ListDevices.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ResetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetRequest != nil {
		l = m.ResetRequest.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_MakeCallable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MakeCallable != nil {
		l = m.MakeCallable.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_RunCallable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunCallable != nil {
		l = m.RunCallable.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ReleaseCallable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseCallable != nil {
		l = m.ReleaseCallable.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_NewReplaySession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewReplaySession != nil {
		l = m.NewReplaySession.Size()
		n += 1 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_CreateSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateSessionResponse != nil {
		l = m.CreateSessionResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ExtendSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendSessionResponse != nil {
		l = m.ExtendSessionResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_PartialRunSetupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartialRunSetupResponse != nil {
		l = m.PartialRunSetupResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_RunStepResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunStepResponse != nil {
		l = m.RunStepResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_CloseSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseSessionResponse != nil {
		l = m.CloseSessionResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ListDevicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListDevicesResponse != nil {
		l = m.ListDevicesResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ResetRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetRequestResponse != nil {
		l = m.ResetRequestResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_MakeCallableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MakeCallableResponse != nil {
		l = m.MakeCallableResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_RunCallableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunCallableResponse != nil {
		l = m.RunCallableResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}
func (m *ReplayOp_ReleaseCallableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseCallableResponse != nil {
		l = m.ReleaseCallableResponse.Size()
		n += 2 + l + sovReplayLog(uint64(l))
	}
	return n
}

func sovReplayLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReplayLog(x uint64) (n int) {
	return sovReplayLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewReplaySession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplayLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewReplaySession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewReplaySession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Devices == nil {
				m.Devices = &ListDevicesResponse{}
			}
			if err := m.Devices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplayLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplayLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplayOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplayLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplayOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplayOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateSessionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_CreateSession{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtendSessionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_ExtendSession{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialRunSetup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PartialRunSetupRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_PartialRunSetup{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunStep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RunStepRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_RunStep{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseSessionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_CloseSession{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDevicesRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_ListDevices{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResetRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_ResetRequest{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeCallable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MakeCallableRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_MakeCallable{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunCallable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RunCallableRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_RunCallable{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseCallable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReleaseCallableRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_ReleaseCallable{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewReplaySession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewReplaySession{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ReplayOp_NewReplaySession{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateSessionResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateSessionResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_CreateSessionResponse{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendSessionResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtendSessionResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_ExtendSessionResponse{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialRunSetupResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PartialRunSetupResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_PartialRunSetupResponse{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunStepResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RunStepResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_RunStepResponse{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSessionResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseSessionResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_CloseSessionResponse{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDevicesResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDevicesResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_ListDevicesResponse{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetRequestResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResetResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_ResetRequestResponse{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeCallableResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MakeCallableResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_MakeCallableResponse{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunCallableResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RunCallableResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_RunCallableResponse{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseCallableResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplayLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplayLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReleaseCallableResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &ReplayOp_ReleaseCallableResponse{v}
			iNdEx = postIndex
		case 31:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeUs", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StartTimeUs = float64(math.Float64frombits(v))
		case 32:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeUs", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EndTimeUs = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipReplayLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplayLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplayLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplayLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplayLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplayLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReplayLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReplayLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReplayLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplayLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReplayLog = fmt.Errorf("proto: unexpected end of group")
)
