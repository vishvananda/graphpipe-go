// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/graph_debug_info.proto

package for_core_protos_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GraphDebugInfo struct {
	// This stores all the source code file names and can be indexed by the
	// `file_index`.
	Files []string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	// This maps a node name to a stack trace in the source code.
	// The map key is a mangling of the containing function and op name with
	// syntax:
	//   op.name '@' func_name
	// For ops in the top-level graph, the func_name is the empty string.
	// Note that op names are restricted to a small number of characters which
	// exclude '@', making it impossible to collide keys of this form. Function
	// names accept a much wider set of characters.
	// It would be preferable to avoid mangling and use a tuple key of (op.name,
	// func_name), but this is not supported with protocol buffers.
	Traces               map[string]*GraphDebugInfo_StackTrace `protobuf:"bytes,2,rep,name=traces,proto3" json:"traces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GraphDebugInfo) Reset()         { *m = GraphDebugInfo{} }
func (m *GraphDebugInfo) String() string { return proto.CompactTextString(m) }
func (*GraphDebugInfo) ProtoMessage()    {}
func (*GraphDebugInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d49d5c184d173e1, []int{0}
}
func (m *GraphDebugInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphDebugInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GraphDebugInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphDebugInfo.Merge(m, src)
}
func (m *GraphDebugInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphDebugInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphDebugInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphDebugInfo proto.InternalMessageInfo

func (m *GraphDebugInfo) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *GraphDebugInfo) GetTraces() map[string]*GraphDebugInfo_StackTrace {
	if m != nil {
		return m.Traces
	}
	return nil
}

// This represents a file/line location in the source code.
type GraphDebugInfo_FileLineCol struct {
	// File name index, which can be used to retrieve the file name string from
	// `files`. The value should be between 0 and (len(files)-1)
	FileIndex int32 `protobuf:"varint,1,opt,name=file_index,json=fileIndex,proto3" json:"file_index,omitempty"`
	// Line number in the file.
	Line int32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	// Col number in the file line.
	Col int32 `protobuf:"varint,3,opt,name=col,proto3" json:"col,omitempty"`
	// Name of function contains the file line.
	Func string `protobuf:"bytes,4,opt,name=func,proto3" json:"func,omitempty"`
	// Source code contained in this file line.
	Code                 string   `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphDebugInfo_FileLineCol) Reset()         { *m = GraphDebugInfo_FileLineCol{} }
func (m *GraphDebugInfo_FileLineCol) String() string { return proto.CompactTextString(m) }
func (*GraphDebugInfo_FileLineCol) ProtoMessage()    {}
func (*GraphDebugInfo_FileLineCol) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d49d5c184d173e1, []int{0, 0}
}
func (m *GraphDebugInfo_FileLineCol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphDebugInfo_FileLineCol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GraphDebugInfo_FileLineCol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphDebugInfo_FileLineCol.Merge(m, src)
}
func (m *GraphDebugInfo_FileLineCol) XXX_Size() int {
	return m.Size()
}
func (m *GraphDebugInfo_FileLineCol) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphDebugInfo_FileLineCol.DiscardUnknown(m)
}

var xxx_messageInfo_GraphDebugInfo_FileLineCol proto.InternalMessageInfo

func (m *GraphDebugInfo_FileLineCol) GetFileIndex() int32 {
	if m != nil {
		return m.FileIndex
	}
	return 0
}

func (m *GraphDebugInfo_FileLineCol) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *GraphDebugInfo_FileLineCol) GetCol() int32 {
	if m != nil {
		return m.Col
	}
	return 0
}

func (m *GraphDebugInfo_FileLineCol) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *GraphDebugInfo_FileLineCol) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// This represents a stack trace which is a ordered list of `FileLineCol`.
type GraphDebugInfo_StackTrace struct {
	// Each line in the stack trace.
	FileLineCols         []*GraphDebugInfo_FileLineCol `protobuf:"bytes,1,rep,name=file_line_cols,json=fileLineCols,proto3" json:"file_line_cols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GraphDebugInfo_StackTrace) Reset()         { *m = GraphDebugInfo_StackTrace{} }
func (m *GraphDebugInfo_StackTrace) String() string { return proto.CompactTextString(m) }
func (*GraphDebugInfo_StackTrace) ProtoMessage()    {}
func (*GraphDebugInfo_StackTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d49d5c184d173e1, []int{0, 1}
}
func (m *GraphDebugInfo_StackTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphDebugInfo_StackTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GraphDebugInfo_StackTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphDebugInfo_StackTrace.Merge(m, src)
}
func (m *GraphDebugInfo_StackTrace) XXX_Size() int {
	return m.Size()
}
func (m *GraphDebugInfo_StackTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphDebugInfo_StackTrace.DiscardUnknown(m)
}

var xxx_messageInfo_GraphDebugInfo_StackTrace proto.InternalMessageInfo

func (m *GraphDebugInfo_StackTrace) GetFileLineCols() []*GraphDebugInfo_FileLineCol {
	if m != nil {
		return m.FileLineCols
	}
	return nil
}

func init() {
	proto.RegisterType((*GraphDebugInfo)(nil), "tensorflow.GraphDebugInfo")
	proto.RegisterMapType((map[string]*GraphDebugInfo_StackTrace)(nil), "tensorflow.GraphDebugInfo.TracesEntry")
	proto.RegisterType((*GraphDebugInfo_FileLineCol)(nil), "tensorflow.GraphDebugInfo.FileLineCol")
	proto.RegisterType((*GraphDebugInfo_StackTrace)(nil), "tensorflow.GraphDebugInfo.StackTrace")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/graph_debug_info.proto", fileDescriptor_2d49d5c184d173e1)
}

var fileDescriptor_2d49d5c184d173e1 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x8b, 0xd4, 0x30,
	0x14, 0xc7, 0xc9, 0x74, 0xbb, 0xd0, 0x57, 0x59, 0x24, 0xec, 0x21, 0x0c, 0x58, 0x8a, 0xa0, 0xf4,
	0xd4, 0xc2, 0x7a, 0x11, 0x05, 0x0f, 0xeb, 0x2f, 0x16, 0xf6, 0xb0, 0x54, 0xbd, 0xec, 0xa5, 0xb6,
	0x99, 0xa4, 0x5b, 0x26, 0x93, 0x37, 0xa4, 0xad, 0xe3, 0xf8, 0xb7, 0x78, 0xf0, 0xcf, 0xf1, 0xe8,
	0xd1, 0xa3, 0xf4, 0xaf, 0xf0, 0x28, 0x49, 0x85, 0x76, 0x44, 0xe6, 0xf6, 0xc9, 0x37, 0xef, 0x7d,
	0xf3, 0xbe, 0xe4, 0x41, 0xd6, 0x09, 0xdd, 0xa2, 0x91, 0x0a, 0x77, 0x19, 0x47, 0x23, 0xb2, 0xad,
	0xc1, 0x0e, 0xab, 0x5e, 0x66, 0xb5, 0x29, 0xb7, 0x77, 0xc5, 0x4a, 0x54, 0x7d, 0x5d, 0x34, 0x5a,
	0x62, 0xea, 0x6e, 0x28, 0x4c, 0x0d, 0x0f, 0xbf, 0x79, 0x70, 0xf6, 0xd6, 0x96, 0xbd, 0xb2, 0x55,
	0x57, 0x5a, 0x22, 0x3d, 0x07, 0x5f, 0x36, 0x4a, 0xb4, 0x8c, 0xc4, 0x5e, 0x12, 0xe4, 0xe3, 0x81,
	0xbe, 0x80, 0xd3, 0xce, 0x94, 0x5c, 0xb4, 0x6c, 0x11, 0x7b, 0x49, 0x78, 0xf1, 0x38, 0x9d, 0x5c,
	0xd2, 0x43, 0x87, 0xf4, 0xbd, 0x2b, 0x7c, 0xad, 0x3b, 0xb3, 0xcf, 0xff, 0x76, 0x2d, 0xbf, 0x40,
	0xf8, 0xa6, 0x51, 0xe2, 0xba, 0xd1, 0xe2, 0x25, 0x2a, 0xfa, 0x00, 0xc0, 0xfa, 0x16, 0x8d, 0x5e,
	0x89, 0xcf, 0x8c, 0xc4, 0x24, 0xf1, 0xf3, 0xc0, 0x2a, 0x57, 0x56, 0xa0, 0x14, 0x4e, 0x54, 0xa3,
	0x05, 0x5b, 0xb8, 0x0b, 0xc7, 0xf4, 0x3e, 0x78, 0x1c, 0x15, 0xf3, 0x9c, 0x64, 0xd1, 0x56, 0xc9,
	0x5e, 0x73, 0x76, 0x12, 0x93, 0x24, 0xc8, 0x1d, 0x5b, 0x8d, 0xe3, 0x4a, 0x30, 0x7f, 0xd4, 0x2c,
	0x2f, 0x6f, 0x01, 0xde, 0x75, 0x25, 0x5f, 0xbb, 0xb9, 0xe8, 0x35, 0x9c, 0xb9, 0xa7, 0xad, 0x69,
	0xc1, 0x51, 0x8d, 0x41, 0x8f, 0x27, 0x9a, 0x8d, 0x9e, 0xdf, 0x93, 0xd3, 0xa1, 0x5d, 0x7e, 0x84,
	0x70, 0x16, 0xd7, 0x0e, 0xb9, 0x16, 0x7b, 0x17, 0x28, 0xc8, 0x2d, 0xd2, 0xe7, 0xe0, 0x7f, 0x2a,
	0x55, 0x3f, 0x66, 0x09, 0x2f, 0x1e, 0x1d, 0x79, 0x65, 0x1a, 0x32, 0x1f, 0x7b, 0x9e, 0x2d, 0x9e,
	0x92, 0xcb, 0xaf, 0xe4, 0xfb, 0x10, 0x91, 0x1f, 0x43, 0x44, 0x7e, 0x0e, 0x11, 0xf9, 0x35, 0x44,
	0x04, 0x18, 0x9a, 0x7a, 0xee, 0x23, 0x4d, 0xb9, 0x11, 0x3b, 0x34, 0xeb, 0xcb, 0xf3, 0x43, 0xcb,
	0x1b, 0xfb, 0xe1, 0xed, 0x0d, 0xb9, 0xfd, 0x50, 0x37, 0xdd, 0x5d, 0x5f, 0xa5, 0x1c, 0x37, 0xf3,
	0x7d, 0xf9, 0x3f, 0xd6, 0xf8, 0xcf, 0x22, 0x49, 0x34, 0x85, 0x55, 0x0a, 0xa7, 0xb4, 0x45, 0x8d,
	0x23, 0xfd, 0x26, 0xa4, 0x3a, 0x75, 0xf4, 0xe4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x76,
	0x64, 0x83, 0x87, 0x02, 0x00, 0x00,
}

func (m *GraphDebugInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphDebugInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphDebugInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Traces) > 0 {
		keysForTraces := make([]string, 0, len(m.Traces))
		for k := range m.Traces {
			keysForTraces = append(keysForTraces, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTraces)
		for iNdEx := len(keysForTraces) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Traces[string(keysForTraces[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGraphDebugInfo(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForTraces[iNdEx])
			copy(dAtA[i:], keysForTraces[iNdEx])
			i = encodeVarintGraphDebugInfo(dAtA, i, uint64(len(keysForTraces[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGraphDebugInfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Files[iNdEx])
			copy(dAtA[i:], m.Files[iNdEx])
			i = encodeVarintGraphDebugInfo(dAtA, i, uint64(len(m.Files[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GraphDebugInfo_FileLineCol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphDebugInfo_FileLineCol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphDebugInfo_FileLineCol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintGraphDebugInfo(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintGraphDebugInfo(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x22
	}
	if m.Col != 0 {
		i = encodeVarintGraphDebugInfo(dAtA, i, uint64(m.Col))
		i--
		dAtA[i] = 0x18
	}
	if m.Line != 0 {
		i = encodeVarintGraphDebugInfo(dAtA, i, uint64(m.Line))
		i--
		dAtA[i] = 0x10
	}
	if m.FileIndex != 0 {
		i = encodeVarintGraphDebugInfo(dAtA, i, uint64(m.FileIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GraphDebugInfo_StackTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphDebugInfo_StackTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphDebugInfo_StackTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileLineCols) > 0 {
		for iNdEx := len(m.FileLineCols) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FileLineCols[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGraphDebugInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGraphDebugInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovGraphDebugInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GraphDebugInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			l = len(s)
			n += 1 + l + sovGraphDebugInfo(uint64(l))
		}
	}
	if len(m.Traces) > 0 {
		for k, v := range m.Traces {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGraphDebugInfo(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGraphDebugInfo(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGraphDebugInfo(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphDebugInfo_FileLineCol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileIndex != 0 {
		n += 1 + sovGraphDebugInfo(uint64(m.FileIndex))
	}
	if m.Line != 0 {
		n += 1 + sovGraphDebugInfo(uint64(m.Line))
	}
	if m.Col != 0 {
		n += 1 + sovGraphDebugInfo(uint64(m.Col))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovGraphDebugInfo(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGraphDebugInfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphDebugInfo_StackTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FileLineCols) > 0 {
		for _, e := range m.FileLineCols {
			l = e.Size()
			n += 1 + l + sovGraphDebugInfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGraphDebugInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGraphDebugInfo(x uint64) (n int) {
	return sovGraphDebugInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GraphDebugInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphDebugInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphDebugInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphDebugInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Traces == nil {
				m.Traces = make(map[string]*GraphDebugInfo_StackTrace)
			}
			var mapkey string
			var mapvalue *GraphDebugInfo_StackTrace
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphDebugInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphDebugInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphDebugInfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGraphDebugInfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphDebugInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGraphDebugInfo
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGraphDebugInfo
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GraphDebugInfo_StackTrace{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphDebugInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGraphDebugInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Traces[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphDebugInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphDebugInfo_FileLineCol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphDebugInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileLineCol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileLineCol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileIndex", wireType)
			}
			m.FileIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphDebugInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphDebugInfo_StackTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphDebugInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLineCols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileLineCols = append(m.FileLineCols, &GraphDebugInfo_FileLineCol{})
			if err := m.FileLineCols[len(m.FileLineCols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphDebugInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraphDebugInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraphDebugInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraphDebugInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphDebugInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGraphDebugInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGraphDebugInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGraphDebugInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGraphDebugInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraphDebugInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGraphDebugInfo = fmt.Errorf("proto: unexpected end of group")
)
