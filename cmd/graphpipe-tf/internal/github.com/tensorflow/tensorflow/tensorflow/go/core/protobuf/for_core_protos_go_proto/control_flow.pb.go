// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/control_flow.proto

package for_core_protos_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Protocol buffer representing the values in ControlFlowContext.
type ValuesDef struct {
	// Value names that have been seen in this context.
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// Value names referenced by but external to this context.
	ExternalValues       map[string]string `protobuf:"bytes,2,rep,name=external_values,json=externalValues,proto3" json:"external_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ValuesDef) Reset()         { *m = ValuesDef{} }
func (m *ValuesDef) String() string { return proto.CompactTextString(m) }
func (*ValuesDef) ProtoMessage()    {}
func (*ValuesDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_64affc5a646d7df1, []int{0}
}
func (m *ValuesDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValuesDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValuesDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValuesDef.Merge(m, src)
}
func (m *ValuesDef) XXX_Size() int {
	return m.Size()
}
func (m *ValuesDef) XXX_DiscardUnknown() {
	xxx_messageInfo_ValuesDef.DiscardUnknown(m)
}

var xxx_messageInfo_ValuesDef proto.InternalMessageInfo

func (m *ValuesDef) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ValuesDef) GetExternalValues() map[string]string {
	if m != nil {
		return m.ExternalValues
	}
	return nil
}

// Container for any kind of control flow context. Any other control flow
// contexts that are added below should also be added here.
type ControlFlowContextDef struct {
	// Types that are valid to be assigned to Ctxt:
	//	*ControlFlowContextDef_CondCtxt
	//	*ControlFlowContextDef_WhileCtxt
	Ctxt                 isControlFlowContextDef_Ctxt `protobuf_oneof:"ctxt"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ControlFlowContextDef) Reset()         { *m = ControlFlowContextDef{} }
func (m *ControlFlowContextDef) String() string { return proto.CompactTextString(m) }
func (*ControlFlowContextDef) ProtoMessage()    {}
func (*ControlFlowContextDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_64affc5a646d7df1, []int{1}
}
func (m *ControlFlowContextDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlFlowContextDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ControlFlowContextDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlFlowContextDef.Merge(m, src)
}
func (m *ControlFlowContextDef) XXX_Size() int {
	return m.Size()
}
func (m *ControlFlowContextDef) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlFlowContextDef.DiscardUnknown(m)
}

var xxx_messageInfo_ControlFlowContextDef proto.InternalMessageInfo

type isControlFlowContextDef_Ctxt interface {
	isControlFlowContextDef_Ctxt()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ControlFlowContextDef_CondCtxt struct {
	CondCtxt *CondContextDef `protobuf:"bytes,1,opt,name=cond_ctxt,json=condCtxt,proto3,oneof" json:"cond_ctxt,omitempty"`
}
type ControlFlowContextDef_WhileCtxt struct {
	WhileCtxt *WhileContextDef `protobuf:"bytes,2,opt,name=while_ctxt,json=whileCtxt,proto3,oneof" json:"while_ctxt,omitempty"`
}

func (*ControlFlowContextDef_CondCtxt) isControlFlowContextDef_Ctxt()  {}
func (*ControlFlowContextDef_WhileCtxt) isControlFlowContextDef_Ctxt() {}

func (m *ControlFlowContextDef) GetCtxt() isControlFlowContextDef_Ctxt {
	if m != nil {
		return m.Ctxt
	}
	return nil
}

func (m *ControlFlowContextDef) GetCondCtxt() *CondContextDef {
	if x, ok := m.GetCtxt().(*ControlFlowContextDef_CondCtxt); ok {
		return x.CondCtxt
	}
	return nil
}

func (m *ControlFlowContextDef) GetWhileCtxt() *WhileContextDef {
	if x, ok := m.GetCtxt().(*ControlFlowContextDef_WhileCtxt); ok {
		return x.WhileCtxt
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControlFlowContextDef) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControlFlowContextDef_CondCtxt)(nil),
		(*ControlFlowContextDef_WhileCtxt)(nil),
	}
}

// Protocol buffer representing a CondContext object.
type CondContextDef struct {
	// Name of the context.
	ContextName string `protobuf:"bytes,1,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
	// Name of the pred tensor.
	PredName string `protobuf:"bytes,2,opt,name=pred_name,json=predName,proto3" json:"pred_name,omitempty"`
	// Name of the pivot tensor.
	PivotName string `protobuf:"bytes,3,opt,name=pivot_name,json=pivotName,proto3" json:"pivot_name,omitempty"`
	// Branch prediction. 0 or 1.
	Branch int32 `protobuf:"varint,4,opt,name=branch,proto3" json:"branch,omitempty"`
	// Values and external values in control flow context.
	ValuesDef *ValuesDef `protobuf:"bytes,5,opt,name=values_def,json=valuesDef,proto3" json:"values_def,omitempty"`
	// Contexts contained inside this context (e.g. nested conds).
	NestedContexts       []*ControlFlowContextDef `protobuf:"bytes,6,rep,name=nested_contexts,json=nestedContexts,proto3" json:"nested_contexts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CondContextDef) Reset()         { *m = CondContextDef{} }
func (m *CondContextDef) String() string { return proto.CompactTextString(m) }
func (*CondContextDef) ProtoMessage()    {}
func (*CondContextDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_64affc5a646d7df1, []int{2}
}
func (m *CondContextDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CondContextDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CondContextDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CondContextDef.Merge(m, src)
}
func (m *CondContextDef) XXX_Size() int {
	return m.Size()
}
func (m *CondContextDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CondContextDef.DiscardUnknown(m)
}

var xxx_messageInfo_CondContextDef proto.InternalMessageInfo

func (m *CondContextDef) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *CondContextDef) GetPredName() string {
	if m != nil {
		return m.PredName
	}
	return ""
}

func (m *CondContextDef) GetPivotName() string {
	if m != nil {
		return m.PivotName
	}
	return ""
}

func (m *CondContextDef) GetBranch() int32 {
	if m != nil {
		return m.Branch
	}
	return 0
}

func (m *CondContextDef) GetValuesDef() *ValuesDef {
	if m != nil {
		return m.ValuesDef
	}
	return nil
}

func (m *CondContextDef) GetNestedContexts() []*ControlFlowContextDef {
	if m != nil {
		return m.NestedContexts
	}
	return nil
}

// Protocol buffer representing a WhileContext object.
type WhileContextDef struct {
	// Name of the context.
	ContextName string `protobuf:"bytes,1,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
	// The number of iterations allowed to run in parallel.
	ParallelIterations int32 `protobuf:"varint,2,opt,name=parallel_iterations,json=parallelIterations,proto3" json:"parallel_iterations,omitempty"`
	// Whether backprop is enabled for this while loop.
	BackProp bool `protobuf:"varint,3,opt,name=back_prop,json=backProp,proto3" json:"back_prop,omitempty"`
	// Whether GPU-CPU memory swap is enabled for this loop.
	SwapMemory bool `protobuf:"varint,4,opt,name=swap_memory,json=swapMemory,proto3" json:"swap_memory,omitempty"`
	// Name of the pivot tensor.
	PivotName string `protobuf:"bytes,5,opt,name=pivot_name,json=pivotName,proto3" json:"pivot_name,omitempty"`
	// Name of the pivot_for_pred tensor.
	PivotForPredName string `protobuf:"bytes,6,opt,name=pivot_for_pred_name,json=pivotForPredName,proto3" json:"pivot_for_pred_name,omitempty"`
	// Name of the pivot_for_body tensor.
	PivotForBodyName string `protobuf:"bytes,7,opt,name=pivot_for_body_name,json=pivotForBodyName,proto3" json:"pivot_for_body_name,omitempty"`
	// List of names for exit tensors.
	LoopExitNames []string `protobuf:"bytes,8,rep,name=loop_exit_names,json=loopExitNames,proto3" json:"loop_exit_names,omitempty"`
	// List of names for enter tensors.
	LoopEnterNames []string `protobuf:"bytes,10,rep,name=loop_enter_names,json=loopEnterNames,proto3" json:"loop_enter_names,omitempty"`
	// Values and external values in control flow context.
	ValuesDef *ValuesDef `protobuf:"bytes,9,opt,name=values_def,json=valuesDef,proto3" json:"values_def,omitempty"`
	// Optional name of the maximum_iterations tensor.
	MaximumIterationsName string `protobuf:"bytes,11,opt,name=maximum_iterations_name,json=maximumIterationsName,proto3" json:"maximum_iterations_name,omitempty"`
	// Contexts contained inside this context (e.g. nested whiles).
	NestedContexts       []*ControlFlowContextDef `protobuf:"bytes,12,rep,name=nested_contexts,json=nestedContexts,proto3" json:"nested_contexts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *WhileContextDef) Reset()         { *m = WhileContextDef{} }
func (m *WhileContextDef) String() string { return proto.CompactTextString(m) }
func (*WhileContextDef) ProtoMessage()    {}
func (*WhileContextDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_64affc5a646d7df1, []int{3}
}
func (m *WhileContextDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhileContextDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhileContextDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhileContextDef.Merge(m, src)
}
func (m *WhileContextDef) XXX_Size() int {
	return m.Size()
}
func (m *WhileContextDef) XXX_DiscardUnknown() {
	xxx_messageInfo_WhileContextDef.DiscardUnknown(m)
}

var xxx_messageInfo_WhileContextDef proto.InternalMessageInfo

func (m *WhileContextDef) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *WhileContextDef) GetParallelIterations() int32 {
	if m != nil {
		return m.ParallelIterations
	}
	return 0
}

func (m *WhileContextDef) GetBackProp() bool {
	if m != nil {
		return m.BackProp
	}
	return false
}

func (m *WhileContextDef) GetSwapMemory() bool {
	if m != nil {
		return m.SwapMemory
	}
	return false
}

func (m *WhileContextDef) GetPivotName() string {
	if m != nil {
		return m.PivotName
	}
	return ""
}

func (m *WhileContextDef) GetPivotForPredName() string {
	if m != nil {
		return m.PivotForPredName
	}
	return ""
}

func (m *WhileContextDef) GetPivotForBodyName() string {
	if m != nil {
		return m.PivotForBodyName
	}
	return ""
}

func (m *WhileContextDef) GetLoopExitNames() []string {
	if m != nil {
		return m.LoopExitNames
	}
	return nil
}

func (m *WhileContextDef) GetLoopEnterNames() []string {
	if m != nil {
		return m.LoopEnterNames
	}
	return nil
}

func (m *WhileContextDef) GetValuesDef() *ValuesDef {
	if m != nil {
		return m.ValuesDef
	}
	return nil
}

func (m *WhileContextDef) GetMaximumIterationsName() string {
	if m != nil {
		return m.MaximumIterationsName
	}
	return ""
}

func (m *WhileContextDef) GetNestedContexts() []*ControlFlowContextDef {
	if m != nil {
		return m.NestedContexts
	}
	return nil
}

func init() {
	proto.RegisterType((*ValuesDef)(nil), "tensorflow.ValuesDef")
	proto.RegisterMapType((map[string]string)(nil), "tensorflow.ValuesDef.ExternalValuesEntry")
	proto.RegisterType((*ControlFlowContextDef)(nil), "tensorflow.ControlFlowContextDef")
	proto.RegisterType((*CondContextDef)(nil), "tensorflow.CondContextDef")
	proto.RegisterType((*WhileContextDef)(nil), "tensorflow.WhileContextDef")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/control_flow.proto", fileDescriptor_64affc5a646d7df1)
}

var fileDescriptor_64affc5a646d7df1 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0x6d, 0xd2, 0xe4, 0x17, 0x4f, 0x4a, 0x52, 0x5c, 0x5a, 0xac, 0x56, 0x84, 0x34, 0x07,
	0x14, 0x84, 0x48, 0xa4, 0x82, 0x10, 0x20, 0x2e, 0xa4, 0xb4, 0x02, 0x24, 0x50, 0x64, 0x09, 0x90,
	0xb8, 0x58, 0x8e, 0xbd, 0x49, 0xad, 0xda, 0x1e, 0x6b, 0xbd, 0x69, 0x9c, 0x47, 0xe0, 0x0d, 0xe0,
	0x1d, 0x78, 0x02, 0x9e, 0x80, 0x23, 0x47, 0x8e, 0x28, 0x4f, 0xc1, 0x11, 0xed, 0xac, 0xdb, 0xfc,
	0x21, 0x87, 0x8a, 0xdb, 0xce, 0xf7, 0x7d, 0x33, 0x9e, 0xf9, 0x66, 0xbd, 0x70, 0x4f, 0xf2, 0x38,
	0x45, 0x31, 0x0c, 0x71, 0xd2, 0xf5, 0x50, 0xf0, 0x6e, 0x22, 0x50, 0xe2, 0x60, 0x3c, 0xec, 0x7a,
	0x18, 0x4b, 0x81, 0xa1, 0xa3, 0xa8, 0x0e, 0xa1, 0x26, 0xcc, 0xc5, 0xad, 0x6f, 0x0c, 0x8c, 0xf7,
	0x6e, 0x38, 0xe6, 0xe9, 0x0b, 0x3e, 0x34, 0x77, 0xa1, 0x7c, 0x4e, 0x81, 0xc5, 0x9a, 0xc5, 0xb6,
	0x61, 0xe7, 0x91, 0x69, 0x43, 0x9d, 0x67, 0x92, 0x8b, 0xd8, 0x0d, 0x9d, 0x5c, 0x50, 0x68, 0x16,
	0xdb, 0xd5, 0xc3, 0xbb, 0x9d, 0x79, 0xad, 0xce, 0x65, 0x9d, 0xce, 0x71, 0x2e, 0xd6, 0xc8, 0x71,
	0x2c, 0xc5, 0xd4, 0xae, 0xf1, 0x25, 0x70, 0xef, 0x39, 0x6c, 0xaf, 0x91, 0x99, 0x5b, 0x50, 0x3c,
	0xe3, 0x53, 0x8b, 0x35, 0x59, 0xdb, 0xb0, 0xd5, 0xd1, 0xbc, 0x01, 0x25, 0xfa, 0xa6, 0x55, 0x20,
	0x4c, 0x07, 0x4f, 0x0b, 0x8f, 0x59, 0xeb, 0x33, 0x83, 0x9d, 0x23, 0x3d, 0xdf, 0x49, 0x88, 0x13,
	0x75, 0xe4, 0x99, 0x54, 0x83, 0x3c, 0x01, 0xc3, 0xc3, 0xd8, 0x77, 0x3c, 0x99, 0x49, 0xaa, 0x55,
	0x3d, 0xdc, 0x5b, 0x6c, 0xf5, 0x08, 0x63, 0x7f, 0x2e, 0x7f, 0xf9, 0x9f, 0x5d, 0x51, 0xf2, 0x23,
	0x99, 0x49, 0xf3, 0x19, 0xc0, 0xe4, 0x34, 0x08, 0xb9, 0xce, 0x2d, 0x50, 0xee, 0xfe, 0x62, 0xee,
	0x07, 0xc5, 0x2e, 0x25, 0x1b, 0x94, 0xa0, 0xb2, 0x7b, 0x65, 0xd8, 0x50, 0x79, 0xad, 0x4f, 0x05,
	0xa8, 0x2d, 0x7f, 0xc4, 0x3c, 0x80, 0x4d, 0x4f, 0x47, 0x4e, 0xec, 0x46, 0x3c, 0x1f, 0xb1, 0x9a,
	0x63, 0x6f, 0xdd, 0x88, 0x9b, 0xfb, 0x60, 0x24, 0x82, 0xfb, 0x9a, 0xd7, 0xe3, 0x56, 0x14, 0x40,
	0xe4, 0x2d, 0x80, 0x24, 0x38, 0xc7, 0x3c, 0xbb, 0x48, 0xac, 0x41, 0x08, 0xd1, 0xbb, 0x50, 0x1e,
	0x08, 0x37, 0xf6, 0x4e, 0xad, 0x8d, 0x26, 0x6b, 0x97, 0xec, 0x3c, 0x32, 0x1f, 0x02, 0xe8, 0x95,
	0x39, 0x3e, 0x1f, 0x5a, 0x25, 0x9a, 0x67, 0x67, 0xed, 0xda, 0x6c, 0xe3, 0xfc, 0xf2, 0x26, 0xbc,
	0x86, 0x7a, 0xcc, 0x53, 0xc9, 0x7d, 0x27, 0xef, 0x2f, 0xb5, 0xca, 0xb4, 0xf1, 0x83, 0x15, 0x1b,
	0xff, 0x36, 0xdf, 0xae, 0xe9, 0xcc, 0x1c, 0x49, 0x5b, 0x5f, 0x37, 0xa0, 0xbe, 0x62, 0xda, 0x55,
	0xcc, 0xe8, 0xc2, 0x76, 0xe2, 0x0a, 0x37, 0x0c, 0x79, 0xe8, 0x04, 0x92, 0x0b, 0x57, 0x06, 0x18,
	0xa7, 0x64, 0x4b, 0xc9, 0x36, 0x2f, 0xa8, 0x57, 0x97, 0x8c, 0x72, 0x6f, 0xe0, 0x7a, 0x67, 0x4e,
	0x22, 0x30, 0x21, 0x7f, 0x2a, 0x76, 0x45, 0x01, 0x7d, 0x81, 0x89, 0x79, 0x1b, 0xaa, 0xe9, 0xc4,
	0x4d, 0x9c, 0x88, 0x47, 0x28, 0xa6, 0xe4, 0x51, 0xc5, 0x06, 0x05, 0xbd, 0x21, 0x64, 0xc5, 0xde,
	0xd2, 0xaa, 0xbd, 0xf7, 0x61, 0x5b, 0xd3, 0x43, 0x14, 0xce, 0x7c, 0x49, 0x65, 0xd2, 0x6d, 0x11,
	0x75, 0x82, 0xa2, 0x7f, 0xb1, 0xac, 0x25, 0xf9, 0x00, 0xfd, 0xa9, 0x96, 0xff, 0xbf, 0x2c, 0xef,
	0xa1, 0x3f, 0x25, 0xf9, 0x1d, 0xa8, 0x87, 0x88, 0x89, 0xc3, 0xb3, 0x40, 0x37, 0x90, 0x5a, 0x15,
	0xfa, 0x03, 0xaf, 0x29, 0xf8, 0x38, 0x0b, 0xa8, 0x89, 0xd4, 0x6c, 0xc3, 0x96, 0xd6, 0xc5, 0x92,
	0x8b, 0x5c, 0x08, 0x24, 0xac, 0x91, 0x50, 0xc1, 0x5a, 0xb9, 0xbc, 0x76, 0xe3, 0x8a, 0x6b, 0x7f,
	0x04, 0x37, 0x23, 0x37, 0x0b, 0xa2, 0x71, 0xb4, 0x60, 0xb9, 0x6e, 0xbd, 0x4a, 0xad, 0xef, 0xe4,
	0xf4, 0xdc, 0x76, 0xea, 0x7f, 0xcd, 0x75, 0xd9, 0xfc, 0xc7, 0xeb, 0xd2, 0xfb, 0xc2, 0xbe, 0xcf,
	0x1a, 0xec, 0xc7, 0xac, 0xc1, 0x7e, 0xce, 0x1a, 0xec, 0xd7, 0xac, 0xc1, 0xc0, 0x42, 0x31, 0x5a,
	0x2c, 0x34, 0x14, 0x6e, 0xc4, 0x27, 0x28, 0xce, 0x7a, 0xd7, 0x17, 0x6a, 0xf6, 0xd5, 0xeb, 0x96,
	0xf6, 0xd9, 0xc7, 0x77, 0xa3, 0x40, 0x9e, 0x8e, 0x07, 0x1d, 0x0f, 0xa3, 0xee, 0xc2, 0xc3, 0xb8,
	0xfe, 0x38, 0xc2, 0x95, 0x17, 0x53, 0x6d, 0x4c, 0x21, 0x0e, 0x21, 0xa9, 0x33, 0x42, 0x7d, 0xfa,
	0xcd, 0xd8, 0xa0, 0x4c, 0xa7, 0x07, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x38, 0x87, 0xd0, 0x02,
	0x70, 0x05, 0x00, 0x00,
}

func (m *ValuesDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValuesDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValuesDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalValues) > 0 {
		keysForExternalValues := make([]string, 0, len(m.ExternalValues))
		for k := range m.ExternalValues {
			keysForExternalValues = append(keysForExternalValues, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForExternalValues)
		for iNdEx := len(keysForExternalValues) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ExternalValues[string(keysForExternalValues[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintControlFlow(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForExternalValues[iNdEx])
			copy(dAtA[i:], keysForExternalValues[iNdEx])
			i = encodeVarintControlFlow(dAtA, i, uint64(len(keysForExternalValues[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintControlFlow(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintControlFlow(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ControlFlowContextDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlFlowContextDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlFlowContextDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctxt != nil {
		{
			size := m.Ctxt.Size()
			i -= size
			if _, err := m.Ctxt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ControlFlowContextDef_CondCtxt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlFlowContextDef_CondCtxt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CondCtxt != nil {
		{
			size, err := m.CondCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ControlFlowContextDef_WhileCtxt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlFlowContextDef_WhileCtxt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhileCtxt != nil {
		{
			size, err := m.WhileCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CondContextDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CondContextDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CondContextDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NestedContexts) > 0 {
		for iNdEx := len(m.NestedContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NestedContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControlFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ValuesDef != nil {
		{
			size, err := m.ValuesDef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Branch != 0 {
		i = encodeVarintControlFlow(dAtA, i, uint64(m.Branch))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PivotName) > 0 {
		i -= len(m.PivotName)
		copy(dAtA[i:], m.PivotName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.PivotName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PredName) > 0 {
		i -= len(m.PredName)
		copy(dAtA[i:], m.PredName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.PredName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContextName) > 0 {
		i -= len(m.ContextName)
		copy(dAtA[i:], m.ContextName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.ContextName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhileContextDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhileContextDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhileContextDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NestedContexts) > 0 {
		for iNdEx := len(m.NestedContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NestedContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControlFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.MaximumIterationsName) > 0 {
		i -= len(m.MaximumIterationsName)
		copy(dAtA[i:], m.MaximumIterationsName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.MaximumIterationsName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LoopEnterNames) > 0 {
		for iNdEx := len(m.LoopEnterNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LoopEnterNames[iNdEx])
			copy(dAtA[i:], m.LoopEnterNames[iNdEx])
			i = encodeVarintControlFlow(dAtA, i, uint64(len(m.LoopEnterNames[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.ValuesDef != nil {
		{
			size, err := m.ValuesDef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControlFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LoopExitNames) > 0 {
		for iNdEx := len(m.LoopExitNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LoopExitNames[iNdEx])
			copy(dAtA[i:], m.LoopExitNames[iNdEx])
			i = encodeVarintControlFlow(dAtA, i, uint64(len(m.LoopExitNames[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PivotForBodyName) > 0 {
		i -= len(m.PivotForBodyName)
		copy(dAtA[i:], m.PivotForBodyName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.PivotForBodyName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PivotForPredName) > 0 {
		i -= len(m.PivotForPredName)
		copy(dAtA[i:], m.PivotForPredName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.PivotForPredName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PivotName) > 0 {
		i -= len(m.PivotName)
		copy(dAtA[i:], m.PivotName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.PivotName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SwapMemory {
		i--
		if m.SwapMemory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BackProp {
		i--
		if m.BackProp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ParallelIterations != 0 {
		i = encodeVarintControlFlow(dAtA, i, uint64(m.ParallelIterations))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContextName) > 0 {
		i -= len(m.ContextName)
		copy(dAtA[i:], m.ContextName)
		i = encodeVarintControlFlow(dAtA, i, uint64(len(m.ContextName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintControlFlow(dAtA []byte, offset int, v uint64) int {
	offset -= sovControlFlow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValuesDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovControlFlow(uint64(l))
		}
	}
	if len(m.ExternalValues) > 0 {
		for k, v := range m.ExternalValues {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovControlFlow(uint64(len(k))) + 1 + len(v) + sovControlFlow(uint64(len(v)))
			n += mapEntrySize + 1 + sovControlFlow(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlFlowContextDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ctxt != nil {
		n += m.Ctxt.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlFlowContextDef_CondCtxt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CondCtxt != nil {
		l = m.CondCtxt.Size()
		n += 1 + l + sovControlFlow(uint64(l))
	}
	return n
}
func (m *ControlFlowContextDef_WhileCtxt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WhileCtxt != nil {
		l = m.WhileCtxt.Size()
		n += 1 + l + sovControlFlow(uint64(l))
	}
	return n
}
func (m *CondContextDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	l = len(m.PredName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	l = len(m.PivotName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	if m.Branch != 0 {
		n += 1 + sovControlFlow(uint64(m.Branch))
	}
	if m.ValuesDef != nil {
		l = m.ValuesDef.Size()
		n += 1 + l + sovControlFlow(uint64(l))
	}
	if len(m.NestedContexts) > 0 {
		for _, e := range m.NestedContexts {
			l = e.Size()
			n += 1 + l + sovControlFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WhileContextDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	if m.ParallelIterations != 0 {
		n += 1 + sovControlFlow(uint64(m.ParallelIterations))
	}
	if m.BackProp {
		n += 2
	}
	if m.SwapMemory {
		n += 2
	}
	l = len(m.PivotName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	l = len(m.PivotForPredName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	l = len(m.PivotForBodyName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	if len(m.LoopExitNames) > 0 {
		for _, s := range m.LoopExitNames {
			l = len(s)
			n += 1 + l + sovControlFlow(uint64(l))
		}
	}
	if m.ValuesDef != nil {
		l = m.ValuesDef.Size()
		n += 1 + l + sovControlFlow(uint64(l))
	}
	if len(m.LoopEnterNames) > 0 {
		for _, s := range m.LoopEnterNames {
			l = len(s)
			n += 1 + l + sovControlFlow(uint64(l))
		}
	}
	l = len(m.MaximumIterationsName)
	if l > 0 {
		n += 1 + l + sovControlFlow(uint64(l))
	}
	if len(m.NestedContexts) > 0 {
		for _, e := range m.NestedContexts {
			l = e.Size()
			n += 1 + l + sovControlFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovControlFlow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozControlFlow(x uint64) (n int) {
	return sovControlFlow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValuesDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValuesDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValuesDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalValues == nil {
				m.ExternalValues = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowControlFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowControlFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthControlFlow
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthControlFlow
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowControlFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthControlFlow
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthControlFlow
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipControlFlow(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthControlFlow
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExternalValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlFlowContextDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlFlowContextDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlFlowContextDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CondCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CondContextDef{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ctxt = &ControlFlowContextDef_CondCtxt{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhileCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhileContextDef{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ctxt = &ControlFlowContextDef_WhileCtxt{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CondContextDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CondContextDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CondContextDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PivotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PivotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			m.Branch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Branch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValuesDef == nil {
				m.ValuesDef = &ValuesDef{}
			}
			if err := m.ValuesDef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NestedContexts = append(m.NestedContexts, &ControlFlowContextDef{})
			if err := m.NestedContexts[len(m.NestedContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhileContextDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhileContextDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhileContextDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParallelIterations", wireType)
			}
			m.ParallelIterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParallelIterations |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackProp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BackProp = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapMemory = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PivotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PivotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PivotForPredName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PivotForPredName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PivotForBodyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PivotForBodyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopExitNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopExitNames = append(m.LoopExitNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValuesDef == nil {
				m.ValuesDef = &ValuesDef{}
			}
			if err := m.ValuesDef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopEnterNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoopEnterNames = append(m.LoopEnterNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumIterationsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaximumIterationsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControlFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControlFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NestedContexts = append(m.NestedContexts, &ControlFlowContextDef{})
			if err := m.NestedContexts[len(m.NestedContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControlFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControlFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipControlFlow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowControlFlow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControlFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthControlFlow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupControlFlow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthControlFlow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthControlFlow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowControlFlow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupControlFlow = fmt.Errorf("proto: unexpected end of group")
)
