// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/step_stats.proto

package step_stats_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	allocation_description_go_proto "github.com/vishvananda/graphpipe-go/cmd/graphpipe-tf/internal/github.com/tensorflow/tensorflow/tensorflow/go/core/framework/allocation_description_go_proto"
	tensor_description_go_proto "github.com/vishvananda/graphpipe-go/cmd/graphpipe-tf/internal/github.com/tensorflow/tensorflow/tensorflow/go/core/framework/tensor_description_go_proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// An allocation/de-allocation operation performed by the allocator.
type AllocationRecord struct {
	// The timestamp of the operation.
	AllocMicros int64 `protobuf:"varint,1,opt,name=alloc_micros,json=allocMicros,proto3" json:"alloc_micros,omitempty"`
	// Number of bytes allocated, or de-allocated if negative.
	AllocBytes           int64    `protobuf:"varint,2,opt,name=alloc_bytes,json=allocBytes,proto3" json:"alloc_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationRecord) Reset()         { *m = AllocationRecord{} }
func (m *AllocationRecord) String() string { return proto.CompactTextString(m) }
func (*AllocationRecord) ProtoMessage()    {}
func (*AllocationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{0}
}
func (m *AllocationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AllocationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationRecord.Merge(m, src)
}
func (m *AllocationRecord) XXX_Size() int {
	return m.Size()
}
func (m *AllocationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationRecord proto.InternalMessageInfo

func (m *AllocationRecord) GetAllocMicros() int64 {
	if m != nil {
		return m.AllocMicros
	}
	return 0
}

func (m *AllocationRecord) GetAllocBytes() int64 {
	if m != nil {
		return m.AllocBytes
	}
	return 0
}

type AllocatorMemoryUsed struct {
	AllocatorName string `protobuf:"bytes,1,opt,name=allocator_name,json=allocatorName,proto3" json:"allocator_name,omitempty"`
	// These are per-node allocator memory stats.
	TotalBytes int64 `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	PeakBytes  int64 `protobuf:"varint,3,opt,name=peak_bytes,json=peakBytes,proto3" json:"peak_bytes,omitempty"`
	// The bytes that are not deallocated.
	LiveBytes int64 `protobuf:"varint,4,opt,name=live_bytes,json=liveBytes,proto3" json:"live_bytes,omitempty"`
	// The allocation and deallocation timeline.
	AllocationRecords []*AllocationRecord `protobuf:"bytes,6,rep,name=allocation_records,json=allocationRecords,proto3" json:"allocation_records,omitempty"`
	// These are snapshots of the overall allocator memory stats.
	// The number of live bytes currently allocated by the allocator.
	AllocatorBytesInUse  int64    `protobuf:"varint,5,opt,name=allocator_bytes_in_use,json=allocatorBytesInUse,proto3" json:"allocator_bytes_in_use,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocatorMemoryUsed) Reset()         { *m = AllocatorMemoryUsed{} }
func (m *AllocatorMemoryUsed) String() string { return proto.CompactTextString(m) }
func (*AllocatorMemoryUsed) ProtoMessage()    {}
func (*AllocatorMemoryUsed) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{1}
}
func (m *AllocatorMemoryUsed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocatorMemoryUsed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AllocatorMemoryUsed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocatorMemoryUsed.Merge(m, src)
}
func (m *AllocatorMemoryUsed) XXX_Size() int {
	return m.Size()
}
func (m *AllocatorMemoryUsed) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocatorMemoryUsed.DiscardUnknown(m)
}

var xxx_messageInfo_AllocatorMemoryUsed proto.InternalMessageInfo

func (m *AllocatorMemoryUsed) GetAllocatorName() string {
	if m != nil {
		return m.AllocatorName
	}
	return ""
}

func (m *AllocatorMemoryUsed) GetTotalBytes() int64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetPeakBytes() int64 {
	if m != nil {
		return m.PeakBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetLiveBytes() int64 {
	if m != nil {
		return m.LiveBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetAllocationRecords() []*AllocationRecord {
	if m != nil {
		return m.AllocationRecords
	}
	return nil
}

func (m *AllocatorMemoryUsed) GetAllocatorBytesInUse() int64 {
	if m != nil {
		return m.AllocatorBytesInUse
	}
	return 0
}

// Output sizes recorded for a single execution of a graph node.
type NodeOutput struct {
	Slot                 int32                                          `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	TensorDescription    *tensor_description_go_proto.TensorDescription `protobuf:"bytes,3,opt,name=tensor_description,json=tensorDescription,proto3" json:"tensor_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *NodeOutput) Reset()         { *m = NodeOutput{} }
func (m *NodeOutput) String() string { return proto.CompactTextString(m) }
func (*NodeOutput) ProtoMessage()    {}
func (*NodeOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{2}
}
func (m *NodeOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeOutput.Merge(m, src)
}
func (m *NodeOutput) XXX_Size() int {
	return m.Size()
}
func (m *NodeOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeOutput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeOutput proto.InternalMessageInfo

func (m *NodeOutput) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NodeOutput) GetTensorDescription() *tensor_description_go_proto.TensorDescription {
	if m != nil {
		return m.TensorDescription
	}
	return nil
}

// For memory tracking.
type MemoryStats struct {
	TempMemorySize                 int64    `protobuf:"varint,1,opt,name=temp_memory_size,json=tempMemorySize,proto3" json:"temp_memory_size,omitempty"`
	PersistentMemorySize           int64    `protobuf:"varint,3,opt,name=persistent_memory_size,json=persistentMemorySize,proto3" json:"persistent_memory_size,omitempty"`
	PersistentTensorAllocIds       []int64  `protobuf:"varint,5,rep,packed,name=persistent_tensor_alloc_ids,json=persistentTensorAllocIds,proto3" json:"persistent_tensor_alloc_ids,omitempty"`
	DeviceTempMemorySize           int64    `protobuf:"varint,2,opt,name=device_temp_memory_size,json=deviceTempMemorySize,proto3" json:"device_temp_memory_size,omitempty"`                                        // Deprecated: Do not use.
	DevicePersistentMemorySize     int64    `protobuf:"varint,4,opt,name=device_persistent_memory_size,json=devicePersistentMemorySize,proto3" json:"device_persistent_memory_size,omitempty"`                      // Deprecated: Do not use.
	DevicePersistentTensorAllocIds []int64  `protobuf:"varint,6,rep,packed,name=device_persistent_tensor_alloc_ids,json=devicePersistentTensorAllocIds,proto3" json:"device_persistent_tensor_alloc_ids,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *MemoryStats) Reset()         { *m = MemoryStats{} }
func (m *MemoryStats) String() string { return proto.CompactTextString(m) }
func (*MemoryStats) ProtoMessage()    {}
func (*MemoryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{3}
}
func (m *MemoryStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemoryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MemoryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryStats.Merge(m, src)
}
func (m *MemoryStats) XXX_Size() int {
	return m.Size()
}
func (m *MemoryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryStats.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryStats proto.InternalMessageInfo

func (m *MemoryStats) GetTempMemorySize() int64 {
	if m != nil {
		return m.TempMemorySize
	}
	return 0
}

func (m *MemoryStats) GetPersistentMemorySize() int64 {
	if m != nil {
		return m.PersistentMemorySize
	}
	return 0
}

func (m *MemoryStats) GetPersistentTensorAllocIds() []int64 {
	if m != nil {
		return m.PersistentTensorAllocIds
	}
	return nil
}

// Deprecated: Do not use.
func (m *MemoryStats) GetDeviceTempMemorySize() int64 {
	if m != nil {
		return m.DeviceTempMemorySize
	}
	return 0
}

// Deprecated: Do not use.
func (m *MemoryStats) GetDevicePersistentMemorySize() int64 {
	if m != nil {
		return m.DevicePersistentMemorySize
	}
	return 0
}

// Deprecated: Do not use.
func (m *MemoryStats) GetDevicePersistentTensorAllocIds() []int64 {
	if m != nil {
		return m.DevicePersistentTensorAllocIds
	}
	return nil
}

// Time/size stats recorded for a single execution of a graph node.
type NodeExecStats struct {
	// TODO(tucker): Use some more compact form of node identity than
	// the full string name.  Either all processes should agree on a
	// global id (cost_id?) for each node, or we should use a hash of
	// the name.
	NodeName             string                                                   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	AllStartMicros       int64                                                    `protobuf:"varint,2,opt,name=all_start_micros,json=allStartMicros,proto3" json:"all_start_micros,omitempty"`
	OpStartRelMicros     int64                                                    `protobuf:"varint,3,opt,name=op_start_rel_micros,json=opStartRelMicros,proto3" json:"op_start_rel_micros,omitempty"`
	OpEndRelMicros       int64                                                    `protobuf:"varint,4,opt,name=op_end_rel_micros,json=opEndRelMicros,proto3" json:"op_end_rel_micros,omitempty"`
	AllEndRelMicros      int64                                                    `protobuf:"varint,5,opt,name=all_end_rel_micros,json=allEndRelMicros,proto3" json:"all_end_rel_micros,omitempty"`
	Memory               []*AllocatorMemoryUsed                                   `protobuf:"bytes,6,rep,name=memory,proto3" json:"memory,omitempty"`
	Output               []*NodeOutput                                            `protobuf:"bytes,7,rep,name=output,proto3" json:"output,omitempty"`
	TimelineLabel        string                                                   `protobuf:"bytes,8,opt,name=timeline_label,json=timelineLabel,proto3" json:"timeline_label,omitempty"`
	ScheduledMicros      int64                                                    `protobuf:"varint,9,opt,name=scheduled_micros,json=scheduledMicros,proto3" json:"scheduled_micros,omitempty"`
	ThreadId             uint32                                                   `protobuf:"varint,10,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ReferencedTensor     []*allocation_description_go_proto.AllocationDescription `protobuf:"bytes,11,rep,name=referenced_tensor,json=referencedTensor,proto3" json:"referenced_tensor,omitempty"`
	MemoryStats          *MemoryStats                                             `protobuf:"bytes,12,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty"`
	AllStartNanos        int64                                                    `protobuf:"varint,13,opt,name=all_start_nanos,json=allStartNanos,proto3" json:"all_start_nanos,omitempty"`
	OpStartRelNanos      int64                                                    `protobuf:"varint,14,opt,name=op_start_rel_nanos,json=opStartRelNanos,proto3" json:"op_start_rel_nanos,omitempty"`
	OpEndRelNanos        int64                                                    `protobuf:"varint,15,opt,name=op_end_rel_nanos,json=opEndRelNanos,proto3" json:"op_end_rel_nanos,omitempty"`
	AllEndRelNanos       int64                                                    `protobuf:"varint,16,opt,name=all_end_rel_nanos,json=allEndRelNanos,proto3" json:"all_end_rel_nanos,omitempty"`
	ScheduledNanos       int64                                                    `protobuf:"varint,17,opt,name=scheduled_nanos,json=scheduledNanos,proto3" json:"scheduled_nanos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *NodeExecStats) Reset()         { *m = NodeExecStats{} }
func (m *NodeExecStats) String() string { return proto.CompactTextString(m) }
func (*NodeExecStats) ProtoMessage()    {}
func (*NodeExecStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{4}
}
func (m *NodeExecStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeExecStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeExecStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeExecStats.Merge(m, src)
}
func (m *NodeExecStats) XXX_Size() int {
	return m.Size()
}
func (m *NodeExecStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeExecStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodeExecStats proto.InternalMessageInfo

func (m *NodeExecStats) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeExecStats) GetAllStartMicros() int64 {
	if m != nil {
		return m.AllStartMicros
	}
	return 0
}

func (m *NodeExecStats) GetOpStartRelMicros() int64 {
	if m != nil {
		return m.OpStartRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetOpEndRelMicros() int64 {
	if m != nil {
		return m.OpEndRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetAllEndRelMicros() int64 {
	if m != nil {
		return m.AllEndRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetMemory() []*AllocatorMemoryUsed {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *NodeExecStats) GetOutput() []*NodeOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *NodeExecStats) GetTimelineLabel() string {
	if m != nil {
		return m.TimelineLabel
	}
	return ""
}

func (m *NodeExecStats) GetScheduledMicros() int64 {
	if m != nil {
		return m.ScheduledMicros
	}
	return 0
}

func (m *NodeExecStats) GetThreadId() uint32 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *NodeExecStats) GetReferencedTensor() []*allocation_description_go_proto.AllocationDescription {
	if m != nil {
		return m.ReferencedTensor
	}
	return nil
}

func (m *NodeExecStats) GetMemoryStats() *MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

func (m *NodeExecStats) GetAllStartNanos() int64 {
	if m != nil {
		return m.AllStartNanos
	}
	return 0
}

func (m *NodeExecStats) GetOpStartRelNanos() int64 {
	if m != nil {
		return m.OpStartRelNanos
	}
	return 0
}

func (m *NodeExecStats) GetOpEndRelNanos() int64 {
	if m != nil {
		return m.OpEndRelNanos
	}
	return 0
}

func (m *NodeExecStats) GetAllEndRelNanos() int64 {
	if m != nil {
		return m.AllEndRelNanos
	}
	return 0
}

func (m *NodeExecStats) GetScheduledNanos() int64 {
	if m != nil {
		return m.ScheduledNanos
	}
	return 0
}

type DeviceStepStats struct {
	Device    string           `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	NodeStats []*NodeExecStats `protobuf:"bytes,2,rep,name=node_stats,json=nodeStats,proto3" json:"node_stats,omitempty"`
	// Its key is thread id.
	ThreadNames          map[uint32]string `protobuf:"bytes,3,rep,name=thread_names,json=threadNames,proto3" json:"thread_names,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeviceStepStats) Reset()         { *m = DeviceStepStats{} }
func (m *DeviceStepStats) String() string { return proto.CompactTextString(m) }
func (*DeviceStepStats) ProtoMessage()    {}
func (*DeviceStepStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{5}
}
func (m *DeviceStepStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceStepStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DeviceStepStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStepStats.Merge(m, src)
}
func (m *DeviceStepStats) XXX_Size() int {
	return m.Size()
}
func (m *DeviceStepStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStepStats.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStepStats proto.InternalMessageInfo

func (m *DeviceStepStats) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DeviceStepStats) GetNodeStats() []*NodeExecStats {
	if m != nil {
		return m.NodeStats
	}
	return nil
}

func (m *DeviceStepStats) GetThreadNames() map[uint32]string {
	if m != nil {
		return m.ThreadNames
	}
	return nil
}

type StepStats struct {
	DevStats             []*DeviceStepStats `protobuf:"bytes,1,rep,name=dev_stats,json=devStats,proto3" json:"dev_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StepStats) Reset()         { *m = StepStats{} }
func (m *StepStats) String() string { return proto.CompactTextString(m) }
func (*StepStats) ProtoMessage()    {}
func (*StepStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{6}
}
func (m *StepStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StepStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StepStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepStats.Merge(m, src)
}
func (m *StepStats) XXX_Size() int {
	return m.Size()
}
func (m *StepStats) XXX_DiscardUnknown() {
	xxx_messageInfo_StepStats.DiscardUnknown(m)
}

var xxx_messageInfo_StepStats proto.InternalMessageInfo

func (m *StepStats) GetDevStats() []*DeviceStepStats {
	if m != nil {
		return m.DevStats
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocationRecord)(nil), "tensorflow.AllocationRecord")
	proto.RegisterType((*AllocatorMemoryUsed)(nil), "tensorflow.AllocatorMemoryUsed")
	proto.RegisterType((*NodeOutput)(nil), "tensorflow.NodeOutput")
	proto.RegisterType((*MemoryStats)(nil), "tensorflow.MemoryStats")
	proto.RegisterType((*NodeExecStats)(nil), "tensorflow.NodeExecStats")
	proto.RegisterType((*DeviceStepStats)(nil), "tensorflow.DeviceStepStats")
	proto.RegisterMapType((map[uint32]string)(nil), "tensorflow.DeviceStepStats.ThreadNamesEntry")
	proto.RegisterType((*StepStats)(nil), "tensorflow.StepStats")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/step_stats.proto", fileDescriptor_1e915309f7ed52e5)
}

var fileDescriptor_1e915309f7ed52e5 = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0x96, 0x13, 0x48, 0xc9, 0x0b, 0x01, 0x67, 0x40, 0xac, 0x0b, 0x25, 0xcb, 0x46, 0x6a, 0x37,
	0xf4, 0x47, 0x90, 0xd8, 0xaa, 0xa5, 0x2b, 0xb5, 0x52, 0xd1, 0xe6, 0x80, 0xba, 0x9b, 0xa5, 0x86,
	0xed, 0xa1, 0x17, 0xcb, 0xd8, 0x0f, 0xb0, 0xb0, 0x3d, 0x96, 0x67, 0x92, 0x2d, 0xfb, 0x6f, 0xec,
	0xb9, 0xff, 0x4f, 0x8f, 0x3d, 0xf6, 0x58, 0xf1, 0x37, 0xf4, 0xd0, 0x53, 0x55, 0xcd, 0x9b, 0x89,
	0xed, 0x24, 0xb0, 0xb7, 0xc9, 0x37, 0xdf, 0x7b, 0x7e, 0x6f, 0xde, 0xf7, 0x4d, 0x06, 0x3e, 0x97,
	0x98, 0x0a, 0x9e, 0x5f, 0xc6, 0xfc, 0xed, 0x41, 0xc0, 0x73, 0x3c, 0xb8, 0xcc, 0xfd, 0x04, 0xdf,
	0xf2, 0xfc, 0xe6, 0x40, 0x48, 0xcc, 0x3c, 0x21, 0x7d, 0x29, 0x06, 0x59, 0xce, 0x25, 0x67, 0x50,
	0x72, 0xb7, 0xbf, 0x79, 0x38, 0xce, 0x8f, 0x63, 0x1e, 0xf8, 0x32, 0xe2, 0xa9, 0x17, 0xa2, 0x08,
	0xf2, 0x28, 0x53, 0x6b, 0x9d, 0x63, 0xfb, 0xf0, 0xe1, 0x38, 0xbd, 0xb3, 0x18, 0xd3, 0xfb, 0x05,
	0xec, 0x1f, 0x8b, 0x9c, 0x2e, 0x06, 0x3c, 0x0f, 0xd9, 0x13, 0x58, 0xa5, 0xef, 0x78, 0x49, 0x14,
	0xe4, 0x5c, 0x38, 0xd6, 0x9e, 0xd5, 0xaf, 0xbb, 0x2d, 0xc2, 0x5e, 0x11, 0xc4, 0x1e, 0x83, 0xfe,
	0xe9, 0x5d, 0xdc, 0x4a, 0x14, 0x4e, 0x8d, 0x18, 0x40, 0xd0, 0xb1, 0x42, 0x7a, 0xbf, 0xd7, 0x60,
	0xc3, 0x24, 0xe6, 0xf9, 0x2b, 0x4c, 0x78, 0x7e, 0xfb, 0x46, 0x60, 0xc8, 0x3e, 0x85, 0x35, 0x7f,
	0x0a, 0x7b, 0xa9, 0x9f, 0x20, 0x65, 0x6f, 0xba, 0xed, 0x02, 0x1d, 0xf9, 0x09, 0xaa, 0xfc, 0x92,
	0x4b, 0x3f, 0x9e, 0xcd, 0x4f, 0x10, 0xe5, 0x67, 0xbb, 0x00, 0x19, 0xfa, 0x37, 0x66, 0xbf, 0x4e,
	0xfb, 0x4d, 0x85, 0x14, 0xdb, 0x71, 0x34, 0x41, 0xb3, 0xbd, 0xa4, 0xb7, 0x15, 0xa2, 0xb7, 0x7f,
	0x02, 0x56, 0x39, 0xc9, 0x9c, 0xda, 0x16, 0x4e, 0x63, 0xaf, 0xde, 0x6f, 0x1d, 0x7e, 0x32, 0x28,
	0x8f, 0x71, 0x30, 0x7f, 0x36, 0x6e, 0xc7, 0x9f, 0x43, 0x04, 0x7b, 0x06, 0x5b, 0x65, 0x4b, 0xf4,
	0x41, 0x2f, 0x4a, 0xbd, 0xb1, 0x40, 0x67, 0x99, 0xbe, 0xbb, 0x51, 0xec, 0xd2, 0xc7, 0x4f, 0xd2,
	0x37, 0x02, 0x7b, 0x29, 0xc0, 0x88, 0x87, 0xf8, 0x7a, 0x2c, 0xb3, 0xb1, 0x64, 0x0c, 0x96, 0x44,
	0xcc, 0x25, 0x9d, 0xc5, 0xb2, 0x4b, 0x6b, 0xf6, 0x12, 0xd8, 0xe2, 0xd4, 0xa8, 0xd3, 0xd6, 0xe1,
	0x6e, 0xb5, 0xc6, 0x73, 0x5a, 0xbe, 0x28, 0x49, 0x6e, 0x47, 0xce, 0x43, 0xbd, 0xff, 0x6a, 0xd0,
	0xd2, 0x63, 0x38, 0x53, 0xaa, 0x63, 0x7d, 0xb0, 0x25, 0x26, 0x99, 0x97, 0x10, 0xe6, 0x89, 0xe8,
	0x1d, 0x9a, 0x39, 0xaf, 0x29, 0xdc, 0x50, 0xa3, 0x77, 0xc8, 0xbe, 0x86, 0xad, 0x0c, 0x73, 0x11,
	0x09, 0x89, 0xa9, 0x9c, 0xe1, 0xeb, 0x53, 0xdf, 0x2c, 0x77, 0x2b, 0x51, 0xdf, 0xc3, 0x4e, 0x25,
	0xca, 0x34, 0xa2, 0x25, 0x13, 0x85, 0xc2, 0x59, 0xde, 0xab, 0xf7, 0xeb, 0xae, 0x53, 0x52, 0x74,
	0x13, 0x74, 0xdc, 0x27, 0xa1, 0x60, 0xdf, 0xc1, 0xa3, 0x10, 0x27, 0x51, 0x80, 0xde, 0x42, 0x95,
	0xa4, 0x85, 0xe3, 0x9a, 0x63, 0xb9, 0x9b, 0x9a, 0x72, 0x3e, 0x5b, 0xef, 0x10, 0x76, 0x4d, 0xe8,
	0x03, 0x65, 0x2f, 0x15, 0x09, 0xb6, 0x35, 0xf1, 0xf4, 0xbe, 0x06, 0x46, 0xd0, 0x5b, 0x4c, 0xb3,
	0xd0, 0x87, 0x92, 0x8c, 0xce, 0xd5, 0x9d, 0xcf, 0x35, 0xdb, 0x51, 0xef, 0x7d, 0x03, 0xda, 0x6a,
	0xe2, 0xc3, 0xdf, 0x30, 0xd0, 0x23, 0xd8, 0x81, 0x66, 0xca, 0x43, 0xac, 0xba, 0x60, 0x45, 0x01,
	0x64, 0x80, 0x3e, 0xd8, 0x7e, 0x1c, 0xab, 0x2b, 0x22, 0x97, 0x53, 0x1f, 0x6a, 0x17, 0x28, 0xff,
	0x9c, 0x29, 0xd8, 0x58, 0xf1, 0x2b, 0xd8, 0xe0, 0x99, 0x21, 0xe6, 0x18, 0x4f, 0xc9, 0x7a, 0x38,
	0x36, 0xcf, 0x88, 0xeb, 0x62, 0x6c, 0xe8, 0xfb, 0xd0, 0xe1, 0x99, 0x87, 0x69, 0x58, 0x25, 0x6b,
	0x83, 0xac, 0xf1, 0x6c, 0x98, 0x86, 0x25, 0xf5, 0x0b, 0x72, 0xc9, 0x3c, 0x57, 0x8b, 0x7a, 0xdd,
	0x8f, 0xe3, 0x19, 0xf2, 0xb7, 0xd0, 0xd0, 0x87, 0x6c, 0x6c, 0xf4, 0xf8, 0x1e, 0x1b, 0x55, 0x6f,
	0x02, 0xd7, 0xd0, 0xd9, 0x00, 0x1a, 0x9c, 0x5c, 0xe0, 0x7c, 0x44, 0x81, 0x5b, 0xd5, 0xc0, 0xd2,
	0x23, 0xae, 0x61, 0xa9, 0x1b, 0x44, 0x46, 0x09, 0xc6, 0x51, 0x8a, 0x5e, 0xec, 0x5f, 0x60, 0xec,
	0xac, 0xe8, 0x1b, 0x64, 0x8a, 0xbe, 0x54, 0x20, 0xdb, 0x07, 0x5b, 0x04, 0xd7, 0x18, 0x8e, 0x63,
	0x0c, 0xa7, 0xa5, 0x37, 0x75, 0xe9, 0x05, 0x6e, 0x4a, 0xdf, 0x81, 0xa6, 0xbc, 0xce, 0xd1, 0x0f,
	0xbd, 0x28, 0x74, 0x60, 0xcf, 0xea, 0xb7, 0xdd, 0x15, 0x0d, 0x9c, 0x84, 0x6c, 0x04, 0x9d, 0x1c,
	0x2f, 0x31, 0xc7, 0x34, 0xc0, 0xd0, 0x08, 0xc0, 0x69, 0x51, 0xa5, 0x4f, 0xee, 0xbf, 0x29, 0xaa,
	0x4e, 0xb4, 0xcb, 0x58, 0xad, 0x07, 0xf6, 0x1c, 0x56, 0xa7, 0x62, 0x54, 0x2a, 0x70, 0x56, 0xc9,
	0xd0, 0x8f, 0xaa, 0xa9, 0x2a, 0x3e, 0x75, 0x5b, 0x49, 0xc5, 0xb4, 0x9f, 0xc1, 0x7a, 0x29, 0x8a,
	0xd4, 0x4f, 0xb9, 0x70, 0xda, 0xd4, 0x52, 0x7b, 0xaa, 0x89, 0x91, 0x02, 0xd5, 0xe0, 0x66, 0x24,
	0xa1, 0xa9, 0x6b, 0xba, 0xfb, 0x52, 0x11, 0x9a, 0xfc, 0x14, 0xec, 0x8a, 0x20, 0x34, 0x75, 0x5d,
	0x67, 0x9d, 0xea, 0x41, 0x13, 0xf7, 0xa1, 0x53, 0x95, 0x83, 0x66, 0xda, 0x85, 0x26, 0xab, 0xd4,
	0xa7, 0x50, 0x1e, 0xb2, 0x21, 0x76, 0x34, 0xb1, 0x80, 0x89, 0xd8, 0xfb, 0xc7, 0x82, 0xf5, 0x17,
	0x64, 0x9c, 0x33, 0x89, 0x99, 0xee, 0x72, 0x0b, 0x1a, 0xda, 0x4b, 0xc6, 0x14, 0xe6, 0x17, 0x3b,
	0x02, 0x20, 0xbf, 0xe8, 0x73, 0xab, 0xd1, 0x08, 0x3e, 0x9e, 0x17, 0x4b, 0x61, 0x2f, 0x97, 0xcc,
	0xa5, 0x33, 0xbe, 0x86, 0x55, 0x33, 0x60, 0xe5, 0x35, 0xe5, 0x0d, 0x15, 0xfb, 0x65, 0x35, 0x76,
	0xae, 0x88, 0xc1, 0x39, 0xf1, 0x95, 0x15, 0xc5, 0x30, 0x95, 0xf9, 0xad, 0xdb, 0x92, 0x25, 0xb2,
	0xfd, 0x03, 0xd8, 0xf3, 0x04, 0x66, 0x43, 0xfd, 0x06, 0x6f, 0xa9, 0xe6, 0xb6, 0xab, 0x96, 0x6c,
	0x13, 0x96, 0x27, 0x7e, 0x3c, 0xd6, 0x57, 0x56, 0xd3, 0xd5, 0x3f, 0x9e, 0xd7, 0x8e, 0xac, 0xde,
	0x10, 0x9a, 0x65, 0xbf, 0x47, 0xd0, 0x0c, 0x71, 0x62, 0xda, 0xb2, 0xa8, 0xb4, 0x9d, 0x0f, 0x94,
	0xe6, 0xae, 0x84, 0x38, 0xa1, 0xd5, 0xf1, 0x7b, 0xeb, 0x8f, 0xbb, 0xae, 0xf5, 0xe7, 0x5d, 0xd7,
	0xfa, 0xeb, 0xae, 0x6b, 0xfd, 0x7d, 0xd7, 0xb5, 0xc0, 0xe1, 0xf9, 0x55, 0x35, 0xb8, 0x78, 0x02,
	0x1c, 0xaf, 0x17, 0x19, 0x4e, 0xd5, 0x3f, 0xbf, 0x38, 0xb5, 0x7e, 0xfd, 0xf9, 0x2a, 0x92, 0xd7,
	0xe3, 0x8b, 0x41, 0xc0, 0x93, 0x83, 0xca, 0xdb, 0xe1, 0xfe, 0xe5, 0x15, 0x7f, 0xf8, 0x11, 0xe3,
	0x5d, 0x71, 0x8f, 0xde, 0x13, 0xff, 0x5a, 0xd6, 0x45, 0x83, 0x56, 0xcf, 0xfe, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x52, 0x00, 0x7f, 0x73, 0xff, 0x08, 0x00, 0x00,
}

func (m *AllocationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AllocBytes != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.AllocBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.AllocMicros != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.AllocMicros))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllocatorMemoryUsed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocatorMemoryUsed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocatorMemoryUsed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AllocationRecords) > 0 {
		for iNdEx := len(m.AllocationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllocationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStepStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.AllocatorBytesInUse != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.AllocatorBytesInUse))
		i--
		dAtA[i] = 0x28
	}
	if m.LiveBytes != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.LiveBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.PeakBytes != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.PeakBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalBytes != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.TotalBytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AllocatorName) > 0 {
		i -= len(m.AllocatorName)
		copy(dAtA[i:], m.AllocatorName)
		i = encodeVarintStepStats(dAtA, i, uint64(len(m.AllocatorName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TensorDescription != nil {
		{
			size, err := m.TensorDescription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStepStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Slot != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemoryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemoryStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DevicePersistentTensorAllocIds) > 0 {
		dAtA3 := make([]byte, len(m.DevicePersistentTensorAllocIds)*10)
		var j2 int
		for _, num1 := range m.DevicePersistentTensorAllocIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintStepStats(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PersistentTensorAllocIds) > 0 {
		dAtA5 := make([]byte, len(m.PersistentTensorAllocIds)*10)
		var j4 int
		for _, num1 := range m.PersistentTensorAllocIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintStepStats(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x2a
	}
	if m.DevicePersistentMemorySize != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.DevicePersistentMemorySize))
		i--
		dAtA[i] = 0x20
	}
	if m.PersistentMemorySize != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.PersistentMemorySize))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviceTempMemorySize != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.DeviceTempMemorySize))
		i--
		dAtA[i] = 0x10
	}
	if m.TempMemorySize != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.TempMemorySize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeExecStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeExecStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeExecStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScheduledNanos != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.ScheduledNanos))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AllEndRelNanos != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.AllEndRelNanos))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.OpEndRelNanos != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.OpEndRelNanos))
		i--
		dAtA[i] = 0x78
	}
	if m.OpStartRelNanos != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.OpStartRelNanos))
		i--
		dAtA[i] = 0x70
	}
	if m.AllStartNanos != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.AllStartNanos))
		i--
		dAtA[i] = 0x68
	}
	if m.MemoryStats != nil {
		{
			size, err := m.MemoryStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStepStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.ReferencedTensor) > 0 {
		for iNdEx := len(m.ReferencedTensor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReferencedTensor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStepStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ThreadId != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.ThreadId))
		i--
		dAtA[i] = 0x50
	}
	if m.ScheduledMicros != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.ScheduledMicros))
		i--
		dAtA[i] = 0x48
	}
	if len(m.TimelineLabel) > 0 {
		i -= len(m.TimelineLabel)
		copy(dAtA[i:], m.TimelineLabel)
		i = encodeVarintStepStats(dAtA, i, uint64(len(m.TimelineLabel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Output) > 0 {
		for iNdEx := len(m.Output) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Output[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStepStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Memory) > 0 {
		for iNdEx := len(m.Memory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStepStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.AllEndRelMicros != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.AllEndRelMicros))
		i--
		dAtA[i] = 0x28
	}
	if m.OpEndRelMicros != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.OpEndRelMicros))
		i--
		dAtA[i] = 0x20
	}
	if m.OpStartRelMicros != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.OpStartRelMicros))
		i--
		dAtA[i] = 0x18
	}
	if m.AllStartMicros != 0 {
		i = encodeVarintStepStats(dAtA, i, uint64(m.AllStartMicros))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintStepStats(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceStepStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceStepStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceStepStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ThreadNames) > 0 {
		keysForThreadNames := make([]uint32, 0, len(m.ThreadNames))
		for k := range m.ThreadNames {
			keysForThreadNames = append(keysForThreadNames, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForThreadNames)
		for iNdEx := len(keysForThreadNames) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ThreadNames[uint32(keysForThreadNames[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintStepStats(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintStepStats(dAtA, i, uint64(keysForThreadNames[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintStepStats(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeStats) > 0 {
		for iNdEx := len(m.NodeStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStepStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintStepStats(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StepStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StepStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StepStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DevStats) > 0 {
		for iNdEx := len(m.DevStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStepStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStepStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovStepStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllocMicros != 0 {
		n += 1 + sovStepStats(uint64(m.AllocMicros))
	}
	if m.AllocBytes != 0 {
		n += 1 + sovStepStats(uint64(m.AllocBytes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocatorMemoryUsed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllocatorName)
	if l > 0 {
		n += 1 + l + sovStepStats(uint64(l))
	}
	if m.TotalBytes != 0 {
		n += 1 + sovStepStats(uint64(m.TotalBytes))
	}
	if m.PeakBytes != 0 {
		n += 1 + sovStepStats(uint64(m.PeakBytes))
	}
	if m.LiveBytes != 0 {
		n += 1 + sovStepStats(uint64(m.LiveBytes))
	}
	if m.AllocatorBytesInUse != 0 {
		n += 1 + sovStepStats(uint64(m.AllocatorBytesInUse))
	}
	if len(m.AllocationRecords) > 0 {
		for _, e := range m.AllocationRecords {
			l = e.Size()
			n += 1 + l + sovStepStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovStepStats(uint64(m.Slot))
	}
	if m.TensorDescription != nil {
		l = m.TensorDescription.Size()
		n += 1 + l + sovStepStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemoryStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TempMemorySize != 0 {
		n += 1 + sovStepStats(uint64(m.TempMemorySize))
	}
	if m.DeviceTempMemorySize != 0 {
		n += 1 + sovStepStats(uint64(m.DeviceTempMemorySize))
	}
	if m.PersistentMemorySize != 0 {
		n += 1 + sovStepStats(uint64(m.PersistentMemorySize))
	}
	if m.DevicePersistentMemorySize != 0 {
		n += 1 + sovStepStats(uint64(m.DevicePersistentMemorySize))
	}
	if len(m.PersistentTensorAllocIds) > 0 {
		l = 0
		for _, e := range m.PersistentTensorAllocIds {
			l += sovStepStats(uint64(e))
		}
		n += 1 + sovStepStats(uint64(l)) + l
	}
	if len(m.DevicePersistentTensorAllocIds) > 0 {
		l = 0
		for _, e := range m.DevicePersistentTensorAllocIds {
			l += sovStepStats(uint64(e))
		}
		n += 1 + sovStepStats(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeExecStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovStepStats(uint64(l))
	}
	if m.AllStartMicros != 0 {
		n += 1 + sovStepStats(uint64(m.AllStartMicros))
	}
	if m.OpStartRelMicros != 0 {
		n += 1 + sovStepStats(uint64(m.OpStartRelMicros))
	}
	if m.OpEndRelMicros != 0 {
		n += 1 + sovStepStats(uint64(m.OpEndRelMicros))
	}
	if m.AllEndRelMicros != 0 {
		n += 1 + sovStepStats(uint64(m.AllEndRelMicros))
	}
	if len(m.Memory) > 0 {
		for _, e := range m.Memory {
			l = e.Size()
			n += 1 + l + sovStepStats(uint64(l))
		}
	}
	if len(m.Output) > 0 {
		for _, e := range m.Output {
			l = e.Size()
			n += 1 + l + sovStepStats(uint64(l))
		}
	}
	l = len(m.TimelineLabel)
	if l > 0 {
		n += 1 + l + sovStepStats(uint64(l))
	}
	if m.ScheduledMicros != 0 {
		n += 1 + sovStepStats(uint64(m.ScheduledMicros))
	}
	if m.ThreadId != 0 {
		n += 1 + sovStepStats(uint64(m.ThreadId))
	}
	if len(m.ReferencedTensor) > 0 {
		for _, e := range m.ReferencedTensor {
			l = e.Size()
			n += 1 + l + sovStepStats(uint64(l))
		}
	}
	if m.MemoryStats != nil {
		l = m.MemoryStats.Size()
		n += 1 + l + sovStepStats(uint64(l))
	}
	if m.AllStartNanos != 0 {
		n += 1 + sovStepStats(uint64(m.AllStartNanos))
	}
	if m.OpStartRelNanos != 0 {
		n += 1 + sovStepStats(uint64(m.OpStartRelNanos))
	}
	if m.OpEndRelNanos != 0 {
		n += 1 + sovStepStats(uint64(m.OpEndRelNanos))
	}
	if m.AllEndRelNanos != 0 {
		n += 2 + sovStepStats(uint64(m.AllEndRelNanos))
	}
	if m.ScheduledNanos != 0 {
		n += 2 + sovStepStats(uint64(m.ScheduledNanos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceStepStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovStepStats(uint64(l))
	}
	if len(m.NodeStats) > 0 {
		for _, e := range m.NodeStats {
			l = e.Size()
			n += 1 + l + sovStepStats(uint64(l))
		}
	}
	if len(m.ThreadNames) > 0 {
		for k, v := range m.ThreadNames {
			_ = k
			_ = v
			mapEntrySize := 1 + sovStepStats(uint64(k)) + 1 + len(v) + sovStepStats(uint64(len(v)))
			n += mapEntrySize + 1 + sovStepStats(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StepStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DevStats) > 0 {
		for _, e := range m.DevStats {
			l = e.Size()
			n += 1 + l + sovStepStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStepStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStepStats(x uint64) (n int) {
	return sovStepStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocMicros", wireType)
			}
			m.AllocMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocMicros |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocBytes", wireType)
			}
			m.AllocBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStepStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStepStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocatorMemoryUsed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocatorMemoryUsed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocatorMemoryUsed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeakBytes", wireType)
			}
			m.PeakBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeakBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveBytes", wireType)
			}
			m.LiveBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorBytesInUse", wireType)
			}
			m.AllocatorBytesInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatorBytesInUse |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocationRecords = append(m.AllocationRecords, &AllocationRecord{})
			if err := m.AllocationRecords[len(m.AllocationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStepStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStepStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorDescription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TensorDescription == nil {
				m.TensorDescription = &tensor_description_go_proto.TensorDescription{}
			}
			if err := m.TensorDescription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStepStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStepStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempMemorySize", wireType)
			}
			m.TempMemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempMemorySize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTempMemorySize", wireType)
			}
			m.DeviceTempMemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceTempMemorySize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersistentMemorySize", wireType)
			}
			m.PersistentMemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PersistentMemorySize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePersistentMemorySize", wireType)
			}
			m.DevicePersistentMemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DevicePersistentMemorySize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStepStats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PersistentTensorAllocIds = append(m.PersistentTensorAllocIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStepStats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStepStats
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStepStats
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PersistentTensorAllocIds) == 0 {
					m.PersistentTensorAllocIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStepStats
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PersistentTensorAllocIds = append(m.PersistentTensorAllocIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PersistentTensorAllocIds", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStepStats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DevicePersistentTensorAllocIds = append(m.DevicePersistentTensorAllocIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStepStats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStepStats
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStepStats
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DevicePersistentTensorAllocIds) == 0 {
					m.DevicePersistentTensorAllocIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStepStats
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DevicePersistentTensorAllocIds = append(m.DevicePersistentTensorAllocIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePersistentTensorAllocIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStepStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStepStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeExecStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeExecStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeExecStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllStartMicros", wireType)
			}
			m.AllStartMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllStartMicros |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpStartRelMicros", wireType)
			}
			m.OpStartRelMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpStartRelMicros |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpEndRelMicros", wireType)
			}
			m.OpEndRelMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpEndRelMicros |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllEndRelMicros", wireType)
			}
			m.AllEndRelMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllEndRelMicros |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory, &AllocatorMemoryUsed{})
			if err := m.Memory[len(m.Memory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output, &NodeOutput{})
			if err := m.Output[len(m.Output)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledMicros", wireType)
			}
			m.ScheduledMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledMicros |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedTensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferencedTensor = append(m.ReferencedTensor, &allocation_description_go_proto.AllocationDescription{})
			if err := m.ReferencedTensor[len(m.ReferencedTensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemoryStats == nil {
				m.MemoryStats = &MemoryStats{}
			}
			if err := m.MemoryStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllStartNanos", wireType)
			}
			m.AllStartNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllStartNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpStartRelNanos", wireType)
			}
			m.OpStartRelNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpStartRelNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpEndRelNanos", wireType)
			}
			m.OpEndRelNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpEndRelNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllEndRelNanos", wireType)
			}
			m.AllEndRelNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllEndRelNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledNanos", wireType)
			}
			m.ScheduledNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStepStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStepStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceStepStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceStepStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceStepStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeStats = append(m.NodeStats, &NodeExecStats{})
			if err := m.NodeStats[len(m.NodeStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreadNames == nil {
				m.ThreadNames = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStepStats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStepStats
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStepStats
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthStepStats
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthStepStats
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStepStats(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStepStats
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ThreadNames[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStepStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStepStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StepStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StepStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StepStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStepStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStepStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevStats = append(m.DevStats, &DeviceStepStats{})
			if err := m.DevStats[len(m.DevStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStepStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStepStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStepStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStepStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStepStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStepStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStepStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStepStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStepStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStepStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStepStats = fmt.Errorf("proto: unexpected end of group")
)
