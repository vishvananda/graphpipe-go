// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/conv_autotuning.proto

package for_core_protos_go_proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	stream_executor "github.com/vishvananda/graphpipe-go/cmd/graphpipe-tf/internal/github.com/tensorflow/tensorflow/tensorflow/go/stream_executor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A convolution. Currently it's only used for logging. In the future, we may
// want to use it in the API as well.
type ConvolutionProto struct {
	Kind     stream_executor.ConvolutionKind             `protobuf:"varint,1,opt,name=kind,proto3,enum=stream_executor.dnn.ConvolutionKind" json:"kind,omitempty"`
	Input    *stream_executor.TensorDescriptorProto      `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Filter   *stream_executor.TensorDescriptorProto      `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Output   *stream_executor.TensorDescriptorProto      `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	ConvDesc *stream_executor.ConvolutionDescriptorProto `protobuf:"bytes,5,opt,name=conv_desc,json=convDesc,proto3" json:"conv_desc,omitempty"`
	// result = conv_scale * conv(...) + side_value_scale * side_value.
	// side_value is an arbitrary buffer if activation is not none. Otherwise, it
	// has to be the result buffer (using its old values).
	ConvScale            float64                        `protobuf:"fixed64,6,opt,name=conv_scale,json=convScale,proto3" json:"conv_scale,omitempty"`
	SideValueScale       float64                        `protobuf:"fixed64,7,opt,name=side_value_scale,json=sideValueScale,proto3" json:"side_value_scale,omitempty"`
	Activation           stream_executor.ActivationMode `protobuf:"varint,8,opt,name=activation,proto3,enum=stream_executor.dnn.ActivationMode" json:"activation,omitempty"`
	InputAddress         int64                          `protobuf:"varint,9,opt,name=input_address,json=inputAddress,proto3" json:"input_address,omitempty"`
	FilterAddress        int64                          `protobuf:"varint,10,opt,name=filter_address,json=filterAddress,proto3" json:"filter_address,omitempty"`
	OutputAddress        int64                          `protobuf:"varint,11,opt,name=output_address,json=outputAddress,proto3" json:"output_address,omitempty"`
	BiasAddress          int64                          `protobuf:"varint,12,opt,name=bias_address,json=biasAddress,proto3" json:"bias_address,omitempty"`
	SideInputAddress     int64                          `protobuf:"varint,13,opt,name=side_input_address,json=sideInputAddress,proto3" json:"side_input_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ConvolutionProto) Reset()         { *m = ConvolutionProto{} }
func (m *ConvolutionProto) String() string { return proto.CompactTextString(m) }
func (*ConvolutionProto) ProtoMessage()    {}
func (*ConvolutionProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d1b55de4e1b5595, []int{0}
}
func (m *ConvolutionProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConvolutionProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConvolutionProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvolutionProto.Merge(m, src)
}
func (m *ConvolutionProto) XXX_Size() int {
	return m.Size()
}
func (m *ConvolutionProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvolutionProto.DiscardUnknown(m)
}

var xxx_messageInfo_ConvolutionProto proto.InternalMessageInfo

func (m *ConvolutionProto) GetKind() stream_executor.ConvolutionKind {
	if m != nil {
		return m.Kind
	}
	return stream_executor.ConvolutionKind_INVALID
}

func (m *ConvolutionProto) GetInput() *stream_executor.TensorDescriptorProto {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ConvolutionProto) GetFilter() *stream_executor.TensorDescriptorProto {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ConvolutionProto) GetOutput() *stream_executor.TensorDescriptorProto {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ConvolutionProto) GetConvDesc() *stream_executor.ConvolutionDescriptorProto {
	if m != nil {
		return m.ConvDesc
	}
	return nil
}

func (m *ConvolutionProto) GetConvScale() float64 {
	if m != nil {
		return m.ConvScale
	}
	return 0
}

func (m *ConvolutionProto) GetSideValueScale() float64 {
	if m != nil {
		return m.SideValueScale
	}
	return 0
}

func (m *ConvolutionProto) GetActivation() stream_executor.ActivationMode {
	if m != nil {
		return m.Activation
	}
	return stream_executor.ActivationMode_kNone
}

func (m *ConvolutionProto) GetInputAddress() int64 {
	if m != nil {
		return m.InputAddress
	}
	return 0
}

func (m *ConvolutionProto) GetFilterAddress() int64 {
	if m != nil {
		return m.FilterAddress
	}
	return 0
}

func (m *ConvolutionProto) GetOutputAddress() int64 {
	if m != nil {
		return m.OutputAddress
	}
	return 0
}

func (m *ConvolutionProto) GetBiasAddress() int64 {
	if m != nil {
		return m.BiasAddress
	}
	return 0
}

func (m *ConvolutionProto) GetSideInputAddress() int64 {
	if m != nil {
		return m.SideInputAddress
	}
	return 0
}

func init() {
	proto.RegisterType((*ConvolutionProto)(nil), "tensorflow.ConvolutionProto")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/conv_autotuning.proto", fileDescriptor_5d1b55de4e1b5595)
}

var fileDescriptor_5d1b55de4e1b5595 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x8b, 0xd3, 0x40,
	0x1c, 0xc6, 0x19, 0x77, 0x5b, 0x77, 0xff, 0x7d, 0x61, 0x99, 0x53, 0x10, 0x2c, 0xd5, 0x5d, 0x21,
	0x88, 0x24, 0xb0, 0x5e, 0x3c, 0xba, 0xbb, 0x5e, 0x44, 0x05, 0x89, 0x2f, 0x07, 0x2f, 0x21, 0xcd,
	0x4c, 0xe3, 0x60, 0x76, 0xfe, 0x65, 0x5e, 0xaa, 0x9f, 0xcc, 0xcf, 0xe0, 0xd1, 0xa3, 0x47, 0xe9,
	0x27, 0x91, 0xf9, 0xcf, 0x6e, 0x8c, 0xa5, 0x20, 0x3d, 0x75, 0x78, 0xfa, 0x7b, 0x9e, 0x79, 0x78,
	0x92, 0x40, 0xe6, 0xa4, 0xb6, 0x68, 0x96, 0x2d, 0x7e, 0xcd, 0x6b, 0x34, 0x32, 0x5f, 0x19, 0x74,
	0xb8, 0xf0, 0xcb, 0xbc, 0x46, 0xbd, 0x2e, 0x2b, 0xef, 0xd0, 0x79, 0xad, 0x74, 0x93, 0xd1, 0x1f,
	0x1c, 0xfe, 0xf2, 0xf7, 0xce, 0x7a, 0x5e, 0xeb, 0x8c, 0xac, 0xae, 0x4b, 0xf9, 0x4d, 0xd6, 0xde,
	0xa1, 0xc9, 0x85, 0xd6, 0xd1, 0xf1, 0xf0, 0xfb, 0x00, 0x4e, 0xae, 0x50, 0xaf, 0xb1, 0xf5, 0x4e,
	0xa1, 0x7e, 0x4b, 0x31, 0xcf, 0xe0, 0xf0, 0x8b, 0xd2, 0x22, 0x61, 0x73, 0x96, 0x4e, 0xcf, 0xcf,
	0xb2, 0x2d, 0x7b, 0x16, 0xec, 0x3d, 0xd3, 0x2b, 0xa5, 0x45, 0x41, 0x0e, 0xfe, 0x1c, 0x06, 0x4a,
	0xaf, 0xbc, 0x4b, 0xee, 0xcc, 0x59, 0x3a, 0x3a, 0x7f, 0xbc, 0xd3, 0xfa, 0x9e, 0x8a, 0xbd, 0x90,
	0xb6, 0x36, 0x6a, 0xe5, 0xd0, 0xd0, 0xa5, 0x45, 0x34, 0xf2, 0x4b, 0x18, 0x2e, 0x55, 0xeb, 0xa4,
	0x49, 0x0e, 0xf6, 0x8e, 0xb8, 0x71, 0x86, 0x0c, 0xf4, 0x2e, 0xd4, 0x38, 0xdc, 0x3f, 0x23, 0x3a,
	0xf9, 0x6b, 0x38, 0xa6, 0x8d, 0x85, 0xb4, 0x75, 0x32, 0xa0, 0x98, 0xfc, 0x7f, 0x43, 0x6c, 0x67,
	0x1d, 0x85, 0x84, 0x20, 0xf2, 0xfb, 0x00, 0x94, 0x66, 0xeb, 0xaa, 0x95, 0xc9, 0x70, 0xce, 0x52,
	0x56, 0x50, 0xfe, 0xbb, 0x20, 0xf0, 0x14, 0x4e, 0xac, 0x12, 0xb2, 0x5c, 0x57, 0xad, 0x97, 0x37,
	0xd0, 0x5d, 0x82, 0xa6, 0x41, 0xff, 0x18, 0xe4, 0x48, 0x5e, 0x01, 0x54, 0xb5, 0x53, 0xeb, 0x2a,
	0xdc, 0x97, 0x1c, 0xd1, 0x03, 0x3a, 0xdd, 0xd9, 0xeb, 0xa2, 0xc3, 0xde, 0xa0, 0x90, 0x45, 0xcf,
	0xc6, 0x4f, 0x61, 0x42, 0x63, 0x97, 0x95, 0x10, 0x46, 0x5a, 0x9b, 0x1c, 0xcf, 0x59, 0x7a, 0x50,
	0x8c, 0x49, 0xbc, 0x88, 0x1a, 0x7f, 0x04, 0xd3, 0x38, 0x67, 0x47, 0x01, 0x51, 0x93, 0xa8, 0xf6,
	0xb0, 0xb8, 0x58, 0x87, 0x8d, 0x22, 0x16, 0xd5, 0x5b, 0xec, 0x01, 0x8c, 0x17, 0xaa, 0xb2, 0x1d,
	0x34, 0x26, 0x68, 0x14, 0xb4, 0x5b, 0xe4, 0x09, 0x70, 0x1a, 0xe1, 0xdf, 0x6a, 0x13, 0x02, 0x69,
	0x9e, 0x97, 0xbd, 0x7a, 0x97, 0xcd, 0x8f, 0xcd, 0x8c, 0xfd, 0xdc, 0xcc, 0xd8, 0xaf, 0xcd, 0x8c,
	0xfd, 0xde, 0xcc, 0xd8, 0xa7, 0x0f, 0x8d, 0x72, 0x9f, 0xfd, 0x22, 0xab, 0xf1, 0x3a, 0xef, 0xbd,
	0xfb, 0xbb, 0x8f, 0x0d, 0x6e, 0x7d, 0x50, 0x4b, 0x34, 0x65, 0x50, 0x4a, 0x52, 0x6c, 0xd9, 0x60,
	0x3c, 0x2d, 0x86, 0xf4, 0xf3, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xf8, 0x57, 0x92,
	0x8c, 0x03, 0x00, 0x00,
}

func (m *ConvolutionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvolutionProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConvolutionProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SideInputAddress != 0 {
		i = encodeVarintConvAutotuning(dAtA, i, uint64(m.SideInputAddress))
		i--
		dAtA[i] = 0x68
	}
	if m.BiasAddress != 0 {
		i = encodeVarintConvAutotuning(dAtA, i, uint64(m.BiasAddress))
		i--
		dAtA[i] = 0x60
	}
	if m.OutputAddress != 0 {
		i = encodeVarintConvAutotuning(dAtA, i, uint64(m.OutputAddress))
		i--
		dAtA[i] = 0x58
	}
	if m.FilterAddress != 0 {
		i = encodeVarintConvAutotuning(dAtA, i, uint64(m.FilterAddress))
		i--
		dAtA[i] = 0x50
	}
	if m.InputAddress != 0 {
		i = encodeVarintConvAutotuning(dAtA, i, uint64(m.InputAddress))
		i--
		dAtA[i] = 0x48
	}
	if m.Activation != 0 {
		i = encodeVarintConvAutotuning(dAtA, i, uint64(m.Activation))
		i--
		dAtA[i] = 0x40
	}
	if m.SideValueScale != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SideValueScale))))
		i--
		dAtA[i] = 0x39
	}
	if m.ConvScale != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConvScale))))
		i--
		dAtA[i] = 0x31
	}
	if m.ConvDesc != nil {
		{
			size, err := m.ConvDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConvAutotuning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConvAutotuning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConvAutotuning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConvAutotuning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintConvAutotuning(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConvAutotuning(dAtA []byte, offset int, v uint64) int {
	offset -= sovConvAutotuning(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConvolutionProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovConvAutotuning(uint64(m.Kind))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovConvAutotuning(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovConvAutotuning(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovConvAutotuning(uint64(l))
	}
	if m.ConvDesc != nil {
		l = m.ConvDesc.Size()
		n += 1 + l + sovConvAutotuning(uint64(l))
	}
	if m.ConvScale != 0 {
		n += 9
	}
	if m.SideValueScale != 0 {
		n += 9
	}
	if m.Activation != 0 {
		n += 1 + sovConvAutotuning(uint64(m.Activation))
	}
	if m.InputAddress != 0 {
		n += 1 + sovConvAutotuning(uint64(m.InputAddress))
	}
	if m.FilterAddress != 0 {
		n += 1 + sovConvAutotuning(uint64(m.FilterAddress))
	}
	if m.OutputAddress != 0 {
		n += 1 + sovConvAutotuning(uint64(m.OutputAddress))
	}
	if m.BiasAddress != 0 {
		n += 1 + sovConvAutotuning(uint64(m.BiasAddress))
	}
	if m.SideInputAddress != 0 {
		n += 1 + sovConvAutotuning(uint64(m.SideInputAddress))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConvAutotuning(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConvAutotuning(x uint64) (n int) {
	return sovConvAutotuning(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConvolutionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConvAutotuning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvolutionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvolutionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= stream_executor.ConvolutionKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &stream_executor.TensorDescriptorProto{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &stream_executor.TensorDescriptorProto{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &stream_executor.TensorDescriptorProto{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConvDesc == nil {
				m.ConvDesc = &stream_executor.ConvolutionDescriptorProto{}
			}
			if err := m.ConvDesc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvScale", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConvScale = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideValueScale", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SideValueScale = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activation", wireType)
			}
			m.Activation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activation |= stream_executor.ActivationMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputAddress", wireType)
			}
			m.InputAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputAddress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterAddress", wireType)
			}
			m.FilterAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterAddress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputAddress", wireType)
			}
			m.OutputAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputAddress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiasAddress", wireType)
			}
			m.BiasAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BiasAddress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideInputAddress", wireType)
			}
			m.SideInputAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SideInputAddress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConvAutotuning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConvAutotuning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConvAutotuning(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConvAutotuning
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConvAutotuning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConvAutotuning
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConvAutotuning
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConvAutotuning
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConvAutotuning        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConvAutotuning          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConvAutotuning = fmt.Errorf("proto: unexpected end of group")
)
