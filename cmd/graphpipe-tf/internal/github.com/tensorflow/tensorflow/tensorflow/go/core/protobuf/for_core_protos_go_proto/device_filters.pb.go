// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/protobuf/device_filters.proto

package for_core_protos_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines the device filters for a remote task.
type TaskDeviceFilters struct {
	DeviceFilters        []string `protobuf:"bytes,1,rep,name=device_filters,json=deviceFilters,proto3" json:"device_filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskDeviceFilters) Reset()         { *m = TaskDeviceFilters{} }
func (m *TaskDeviceFilters) String() string { return proto.CompactTextString(m) }
func (*TaskDeviceFilters) ProtoMessage()    {}
func (*TaskDeviceFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_48fe7fa73e9da3a6, []int{0}
}
func (m *TaskDeviceFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDeviceFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TaskDeviceFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDeviceFilters.Merge(m, src)
}
func (m *TaskDeviceFilters) XXX_Size() int {
	return m.Size()
}
func (m *TaskDeviceFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDeviceFilters.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDeviceFilters proto.InternalMessageInfo

func (m *TaskDeviceFilters) GetDeviceFilters() []string {
	if m != nil {
		return m.DeviceFilters
	}
	return nil
}

// Defines the device filters for tasks in a job.
type JobDeviceFilters struct {
	// The name of this job.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mapping from task ID to task device filters.
	Tasks                map[int32]*TaskDeviceFilters `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *JobDeviceFilters) Reset()         { *m = JobDeviceFilters{} }
func (m *JobDeviceFilters) String() string { return proto.CompactTextString(m) }
func (*JobDeviceFilters) ProtoMessage()    {}
func (*JobDeviceFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_48fe7fa73e9da3a6, []int{1}
}
func (m *JobDeviceFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobDeviceFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JobDeviceFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDeviceFilters.Merge(m, src)
}
func (m *JobDeviceFilters) XXX_Size() int {
	return m.Size()
}
func (m *JobDeviceFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDeviceFilters.DiscardUnknown(m)
}

var xxx_messageInfo_JobDeviceFilters proto.InternalMessageInfo

func (m *JobDeviceFilters) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobDeviceFilters) GetTasks() map[int32]*TaskDeviceFilters {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// Defines the device filters for jobs in a cluster.
type ClusterDeviceFilters struct {
	Jobs                 []*JobDeviceFilters `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterDeviceFilters) Reset()         { *m = ClusterDeviceFilters{} }
func (m *ClusterDeviceFilters) String() string { return proto.CompactTextString(m) }
func (*ClusterDeviceFilters) ProtoMessage()    {}
func (*ClusterDeviceFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_48fe7fa73e9da3a6, []int{2}
}
func (m *ClusterDeviceFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterDeviceFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterDeviceFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDeviceFilters.Merge(m, src)
}
func (m *ClusterDeviceFilters) XXX_Size() int {
	return m.Size()
}
func (m *ClusterDeviceFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDeviceFilters.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDeviceFilters proto.InternalMessageInfo

func (m *ClusterDeviceFilters) GetJobs() []*JobDeviceFilters {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskDeviceFilters)(nil), "tensorflow.TaskDeviceFilters")
	proto.RegisterType((*JobDeviceFilters)(nil), "tensorflow.JobDeviceFilters")
	proto.RegisterMapType((map[int32]*TaskDeviceFilters)(nil), "tensorflow.JobDeviceFilters.TasksEntry")
	proto.RegisterType((*ClusterDeviceFilters)(nil), "tensorflow.ClusterDeviceFilters")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/device_filters.proto", fileDescriptor_48fe7fa73e9da3a6)
}

var fileDescriptor_48fe7fa73e9da3a6 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0xb9, 0xfd, 0xf8, 0x43, 0x6f, 0xf9, 0x4b, 0x8d, 0x2e, 0x42, 0xd1, 0x10, 0x0a, 0x62,
	0x36, 0x26, 0xd2, 0x6e, 0xa4, 0xe0, 0xa6, 0x7e, 0x20, 0xae, 0xca, 0xa0, 0x08, 0x6e, 0x42, 0xd2,
	0x4e, 0x62, 0x6c, 0x9a, 0x91, 0x99, 0x49, 0xa5, 0x0f, 0xe3, 0xab, 0xb8, 0x76, 0xe9, 0xd2, 0xa5,
	0xe4, 0x29, 0x5c, 0x4a, 0x26, 0x8b, 0x24, 0x55, 0xdc, 0x1d, 0x0e, 0xbf, 0x73, 0xb8, 0x97, 0x83,
	0x47, 0x92, 0x26, 0x82, 0xf1, 0x20, 0x66, 0xcf, 0xce, 0x8c, 0x71, 0xea, 0x3c, 0x71, 0x26, 0x99,
	0x9f, 0x06, 0xce, 0x9c, 0xae, 0xa2, 0x19, 0x75, 0x83, 0x28, 0x96, 0x94, 0x0b, 0x5b, 0xf9, 0x1a,
	0x96, 0xf8, 0x60, 0x8c, 0xdb, 0x37, 0x9e, 0x58, 0x9c, 0x2b, 0xee, 0xb2, 0xc0, 0xb4, 0x03, 0xdc,
	0xaa, 0x07, 0x75, 0x30, 0x9b, 0x56, 0x87, 0xfc, 0x9f, 0x57, 0xb1, 0xc1, 0x2b, 0x60, 0xef, 0x9a,
	0xf9, 0xf5, 0xac, 0x86, 0xad, 0xc4, 0x5b, 0x52, 0x1d, 0x4c, 0xb0, 0x3a, 0x44, 0x69, 0xed, 0x14,
	0xdb, 0xd2, 0x13, 0x0b, 0xa1, 0x37, 0xcc, 0xa6, 0xd5, 0x1d, 0x1e, 0xda, 0xe5, 0x01, 0xf6, 0x66,
	0x81, 0x9d, 0x9f, 0x23, 0x2e, 0x12, 0xc9, 0xd7, 0xa4, 0x48, 0xf5, 0xef, 0x10, 0x4b, 0x53, 0xeb,
	0x61, 0x73, 0x41, 0xd7, 0xaa, 0xbf, 0x4d, 0x72, 0xa9, 0x8d, 0xb0, 0xbd, 0xf2, 0xe2, 0x94, 0xea,
	0x0d, 0x13, 0xac, 0xee, 0x70, 0xbf, 0x5a, 0xff, 0xe3, 0x39, 0x52, 0xb0, 0xe3, 0xc6, 0x09, 0x0c,
	0xae, 0x70, 0xf7, 0x2c, 0x4e, 0x85, 0xa4, 0xbc, 0xfe, 0xc3, 0x31, 0xb6, 0x1e, 0x99, 0x5f, 0x7c,
	0xdd, 0x1d, 0xee, 0xfd, 0x75, 0x2e, 0x51, 0xe4, 0xe4, 0x05, 0xde, 0x32, 0x03, 0xde, 0x33, 0x03,
	0x3e, 0x32, 0x03, 0x3e, 0x33, 0x03, 0xb0, 0xcf, 0x78, 0x58, 0x4d, 0xce, 0x23, 0x21, 0x79, 0x9a,
	0xc8, 0x68, 0x49, 0x27, 0x3b, 0xb5, 0x8e, 0x69, 0xbe, 0x8a, 0x98, 0xc2, 0xfd, 0x6d, 0x18, 0xc9,
	0x87, 0xd4, 0xb7, 0x67, 0x6c, 0xe9, 0x54, 0x26, 0xfd, 0x5d, 0x86, 0x6c, 0x63, 0xeb, 0x80, 0x71,
	0x37, 0x77, 0x5c, 0xe5, 0x08, 0x37, 0x64, 0x85, 0xfa, 0x02, 0xf0, 0xff, 0x29, 0x35, 0xfa, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xf1, 0xe4, 0x7b, 0x4d, 0x2a, 0x02, 0x00, 0x00,
}

func (m *TaskDeviceFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDeviceFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDeviceFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceFilters) > 0 {
		for iNdEx := len(m.DeviceFilters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceFilters[iNdEx])
			copy(dAtA[i:], m.DeviceFilters[iNdEx])
			i = encodeVarintDeviceFilters(dAtA, i, uint64(len(m.DeviceFilters[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobDeviceFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobDeviceFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobDeviceFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tasks) > 0 {
		keysForTasks := make([]int32, 0, len(m.Tasks))
		for k := range m.Tasks {
			keysForTasks = append(keysForTasks, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForTasks)
		for iNdEx := len(keysForTasks) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tasks[int32(keysForTasks[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDeviceFilters(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintDeviceFilters(dAtA, i, uint64(keysForTasks[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDeviceFilters(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDeviceFilters(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterDeviceFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDeviceFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterDeviceFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Jobs) > 0 {
		for iNdEx := len(m.Jobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeviceFilters(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeviceFilters(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeviceFilters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskDeviceFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceFilters) > 0 {
		for _, s := range m.DeviceFilters {
			l = len(s)
			n += 1 + l + sovDeviceFilters(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobDeviceFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeviceFilters(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for k, v := range m.Tasks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDeviceFilters(uint64(l))
			}
			mapEntrySize := 1 + sovDeviceFilters(uint64(k)) + l
			n += mapEntrySize + 1 + sovDeviceFilters(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterDeviceFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovDeviceFilters(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDeviceFilters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeviceFilters(x uint64) (n int) {
	return sovDeviceFilters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskDeviceFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDeviceFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDeviceFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceFilters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceFilters = append(m.DeviceFilters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobDeviceFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobDeviceFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobDeviceFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tasks == nil {
				m.Tasks = make(map[int32]*TaskDeviceFilters)
			}
			var mapkey int32
			var mapvalue *TaskDeviceFilters
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeviceFilters
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeviceFilters
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeviceFilters
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDeviceFilters
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDeviceFilters
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TaskDeviceFilters{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDeviceFilters(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDeviceFilters
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tasks[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDeviceFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDeviceFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDeviceFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, &JobDeviceFilters{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceFilters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceFilters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeviceFilters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeviceFilters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeviceFilters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeviceFilters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceFilters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeviceFilters = fmt.Errorf("proto: unexpected end of group")
)
