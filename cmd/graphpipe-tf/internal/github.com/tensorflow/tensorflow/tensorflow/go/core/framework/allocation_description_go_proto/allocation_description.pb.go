// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/allocation_description.proto

package allocation_description_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AllocationDescription struct {
	// Total number of bytes requested
	RequestedBytes int64 `protobuf:"varint,1,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Total number of bytes allocated if known
	AllocatedBytes int64 `protobuf:"varint,2,opt,name=allocated_bytes,json=allocatedBytes,proto3" json:"allocated_bytes,omitempty"`
	// Name of the allocator used
	AllocatorName string `protobuf:"bytes,3,opt,name=allocator_name,json=allocatorName,proto3" json:"allocator_name,omitempty"`
	// Identifier of the allocated buffer if known
	AllocationId int64 `protobuf:"varint,4,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	// Set if this tensor only has one remaining reference
	HasSingleReference bool `protobuf:"varint,5,opt,name=has_single_reference,json=hasSingleReference,proto3" json:"has_single_reference,omitempty"`
	// Address of the allocation.
	Ptr                  uint64   `protobuf:"varint,6,opt,name=ptr,proto3" json:"ptr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationDescription) Reset()         { *m = AllocationDescription{} }
func (m *AllocationDescription) String() string { return proto.CompactTextString(m) }
func (*AllocationDescription) ProtoMessage()    {}
func (*AllocationDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_1254702e9f0c7d2f, []int{0}
}
func (m *AllocationDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AllocationDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationDescription.Merge(m, src)
}
func (m *AllocationDescription) XXX_Size() int {
	return m.Size()
}
func (m *AllocationDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationDescription.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationDescription proto.InternalMessageInfo

func (m *AllocationDescription) GetRequestedBytes() int64 {
	if m != nil {
		return m.RequestedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatedBytes() int64 {
	if m != nil {
		return m.AllocatedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatorName() string {
	if m != nil {
		return m.AllocatorName
	}
	return ""
}

func (m *AllocationDescription) GetAllocationId() int64 {
	if m != nil {
		return m.AllocationId
	}
	return 0
}

func (m *AllocationDescription) GetHasSingleReference() bool {
	if m != nil {
		return m.HasSingleReference
	}
	return false
}

func (m *AllocationDescription) GetPtr() uint64 {
	if m != nil {
		return m.Ptr
	}
	return 0
}

func init() {
	proto.RegisterType((*AllocationDescription)(nil), "tensorflow.AllocationDescription")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/allocation_description.proto", fileDescriptor_1254702e9f0c7d2f)
}

var fileDescriptor_1254702e9f0c7d2f = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4a, 0xc3, 0x50,
	0x14, 0xc6, 0x39, 0xb6, 0x16, 0xbd, 0x58, 0x95, 0xa0, 0x10, 0x10, 0x42, 0x50, 0xc4, 0x4c, 0x89,
	0x20, 0xb8, 0x5b, 0x5c, 0x5c, 0xa4, 0xc4, 0x4d, 0x90, 0xcb, 0x6d, 0x72, 0x9a, 0x06, 0x93, 0x9c,
	0x78, 0xee, 0x2d, 0xc5, 0x67, 0xf2, 0x45, 0x1c, 0x1d, 0x1d, 0x25, 0x4f, 0xa1, 0x9b, 0x24, 0xb5,
	0x49, 0x87, 0x0e, 0x6e, 0x1f, 0xbf, 0xf3, 0xbb, 0x7f, 0xf8, 0x8e, 0xb8, 0x36, 0x58, 0x68, 0xe2,
	0x69, 0x46, 0x8b, 0x20, 0x22, 0xc6, 0x60, 0xca, 0x2a, 0xc7, 0x05, 0xf1, 0x73, 0xa0, 0xb2, 0x8c,
	0x22, 0x65, 0x52, 0x2a, 0x64, 0x8c, 0x3a, 0xe2, 0xb4, 0xac, 0xb3, 0x5f, 0x32, 0x19, 0xb2, 0x44,
	0x77, 0xee, 0xf4, 0x07, 0xc4, 0xf1, 0x4d, 0x2b, 0xdf, 0x76, 0xae, 0x75, 0x21, 0x0e, 0x18, 0x5f,
	0xe6, 0xa8, 0x0d, 0xc6, 0x72, 0xf2, 0x6a, 0x50, 0xdb, 0xe0, 0x82, 0xd7, 0x0b, 0xf7, 0x5b, 0x3c,
	0xaa, 0x69, 0x2d, 0xfe, 0x3d, 0xd7, 0x8a, 0x5b, 0x4b, 0xb1, 0xc5, 0x4b, 0xf1, 0x5c, 0xac, 0x08,
	0xb1, 0x2c, 0x54, 0x8e, 0x76, 0xcf, 0x05, 0x6f, 0x37, 0x1c, 0xb6, 0xf4, 0x5e, 0xe5, 0x68, 0x9d,
	0x89, 0xe1, 0xda, 0xf7, 0xd3, 0xd8, 0xee, 0x37, 0xb7, 0xed, 0x75, 0xf0, 0x2e, 0xb6, 0x2e, 0xc5,
	0xd1, 0x4c, 0x69, 0xa9, 0xd3, 0x22, 0xc9, 0x50, 0x32, 0x4e, 0x91, 0xb1, 0x88, 0xd0, 0xde, 0x76,
	0xc1, 0xdb, 0x09, 0xad, 0x99, 0xd2, 0x0f, 0xcd, 0x28, 0x5c, 0x4d, 0xac, 0x43, 0xd1, 0x2b, 0x0d,
	0xdb, 0x03, 0x17, 0xbc, 0x7e, 0x58, 0xc7, 0xd1, 0x1b, 0xbc, 0x57, 0x0e, 0x7c, 0x54, 0x0e, 0x7c,
	0x56, 0x0e, 0x7c, 0x55, 0x0e, 0x08, 0x9b, 0x38, 0xf1, 0xbb, 0x7a, 0xfc, 0xb6, 0xd1, 0xd1, 0xc9,
	0xc6, 0x96, 0xc6, 0x75, 0xa1, 0x7a, 0x0c, 0x8f, 0x4f, 0x49, 0x6a, 0x66, 0xf3, 0x89, 0x1f, 0x51,
	0x1e, 0xac, 0xad, 0x65, 0x73, 0x4c, 0xe8, 0x7f, 0xfb, 0x92, 0x09, 0xc9, 0x66, 0x65, 0xdf, 0x00,
	0x93, 0x41, 0x93, 0xae, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x4e, 0x59, 0x36, 0xf6, 0x01,
	0x00, 0x00,
}

func (m *AllocationDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ptr != 0 {
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.Ptr))
		i--
		dAtA[i] = 0x30
	}
	if m.HasSingleReference {
		i--
		if m.HasSingleReference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AllocationId != 0 {
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.AllocationId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AllocatorName) > 0 {
		i -= len(m.AllocatorName)
		copy(dAtA[i:], m.AllocatorName)
		i = encodeVarintAllocationDescription(dAtA, i, uint64(len(m.AllocatorName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AllocatedBytes != 0 {
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.AllocatedBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestedBytes != 0 {
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.RequestedBytes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAllocationDescription(dAtA []byte, offset int, v uint64) int {
	offset -= sovAllocationDescription(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocationDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestedBytes != 0 {
		n += 1 + sovAllocationDescription(uint64(m.RequestedBytes))
	}
	if m.AllocatedBytes != 0 {
		n += 1 + sovAllocationDescription(uint64(m.AllocatedBytes))
	}
	l = len(m.AllocatorName)
	if l > 0 {
		n += 1 + l + sovAllocationDescription(uint64(l))
	}
	if m.AllocationId != 0 {
		n += 1 + sovAllocationDescription(uint64(m.AllocationId))
	}
	if m.HasSingleReference {
		n += 2
	}
	if m.Ptr != 0 {
		n += 1 + sovAllocationDescription(uint64(m.Ptr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAllocationDescription(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAllocationDescription(x uint64) (n int) {
	return sovAllocationDescription(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocationDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocationDescription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBytes", wireType)
			}
			m.RequestedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedBytes", wireType)
			}
			m.AllocatedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocationDescription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocationDescription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			m.AllocationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSingleReference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSingleReference = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptr", wireType)
			}
			m.Ptr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAllocationDescription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocationDescription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocationDescription(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocationDescription
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllocationDescription
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAllocationDescription
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAllocationDescription
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAllocationDescription        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocationDescription          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAllocationDescription = fmt.Errorf("proto: unexpected end of group")
)
