// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/remote_fused_graph_execute_info.proto

package remote_fused_graph_execute_info_go_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	graph_go_proto "github.com/vishvananda/graphpipe-go/cmd/graphpipe-tf/internal/github.com/tensorflow/tensorflow/tensorflow/go/core/framework/graph_go_proto"
	tensor_shape_go_proto "github.com/vishvananda/graphpipe-go/cmd/graphpipe-tf/internal/github.com/tensorflow/tensorflow/tensorflow/go/core/framework/tensor_shape_go_proto"
	types_go_proto "github.com/vishvananda/graphpipe-go/cmd/graphpipe-tf/internal/github.com/tensorflow/tensorflow/tensorflow/go/core/framework/types_go_proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
type RemoteFusedGraphExecuteInfo struct {
	// Definition of remote graph
	RemoteGraph *graph_go_proto.GraphDef `protobuf:"bytes,1,opt,name=remote_graph,json=remoteGraph,proto3" json:"remote_graph,omitempty"`
	// Remote fused graph input node name
	GraphInputNodeName []string `protobuf:"bytes,2,rep,name=graph_input_node_name,json=graphInputNodeName,proto3" json:"graph_input_node_name,omitempty"`
	// Remote fused graph output node name
	GraphOutputNodeName []string `protobuf:"bytes,3,rep,name=graph_output_node_name,json=graphOutputNodeName,proto3" json:"graph_output_node_name,omitempty"`
	// Executor's name
	ExecutorName string `protobuf:"bytes,4,opt,name=executor_name,json=executorName,proto3" json:"executor_name,omitempty"`
	// Optional: Parameters given to the executor
	SerializedExecutorParameters []byte `protobuf:"bytes,5,opt,name=serialized_executor_parameters,json=serializedExecutorParameters,proto3" json:"serialized_executor_parameters,omitempty"`
	// Optional: Default graph input tensor shape used to allocate memory
	// before executing op
	DefaultGraphInputTensorShape []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto `protobuf:"bytes,6,rep,name=default_graph_input_tensor_shape,json=defaultGraphInputTensorShape,proto3" json:"default_graph_input_tensor_shape,omitempty"`
	// Optional: Default graph input tensor shape used to allocate memory
	// before executing op
	// TODO(satok): Remote output tensor shape once shape information is stored
	// in NodeDef
	DefaultGraphOutputTensorShape []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto `protobuf:"bytes,7,rep,name=default_graph_output_tensor_shape,json=defaultGraphOutputTensorShape,proto3" json:"default_graph_output_tensor_shape,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                                            `json:"-"`
	XXX_unrecognized              []byte                                              `json:"-"`
	XXX_sizecache                 int32                                               `json:"-"`
}

func (m *RemoteFusedGraphExecuteInfo) Reset()         { *m = RemoteFusedGraphExecuteInfo{} }
func (m *RemoteFusedGraphExecuteInfo) String() string { return proto.CompactTextString(m) }
func (*RemoteFusedGraphExecuteInfo) ProtoMessage()    {}
func (*RemoteFusedGraphExecuteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c15f13da5b37f691, []int{0}
}
func (m *RemoteFusedGraphExecuteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteFusedGraphExecuteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RemoteFusedGraphExecuteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo.Merge(m, src)
}
func (m *RemoteFusedGraphExecuteInfo) XXX_Size() int {
	return m.Size()
}
func (m *RemoteFusedGraphExecuteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteFusedGraphExecuteInfo proto.InternalMessageInfo

func (m *RemoteFusedGraphExecuteInfo) GetRemoteGraph() *graph_go_proto.GraphDef {
	if m != nil {
		return m.RemoteGraph
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetGraphInputNodeName() []string {
	if m != nil {
		return m.GraphInputNodeName
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetGraphOutputNodeName() []string {
	if m != nil {
		return m.GraphOutputNodeName
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetExecutorName() string {
	if m != nil {
		return m.ExecutorName
	}
	return ""
}

func (m *RemoteFusedGraphExecuteInfo) GetSerializedExecutorParameters() []byte {
	if m != nil {
		return m.SerializedExecutorParameters
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetDefaultGraphInputTensorShape() []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto {
	if m != nil {
		return m.DefaultGraphInputTensorShape
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetDefaultGraphOutputTensorShape() []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto {
	if m != nil {
		return m.DefaultGraphOutputTensorShape
	}
	return nil
}

type RemoteFusedGraphExecuteInfo_TensorShapeTypeProto struct {
	Dtype                types_go_proto.DataType                 `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Shape                *tensor_shape_go_proto.TensorShapeProto `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Reset() {
	*m = RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{}
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) String() string {
	return proto.CompactTextString(m)
}
func (*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) ProtoMessage() {}
func (*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_c15f13da5b37f691, []int{0, 0}
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto.Merge(m, src)
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Size() int {
	return m.Size()
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto proto.InternalMessageInfo

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GetDtype() types_go_proto.DataType {
	if m != nil {
		return m.Dtype
	}
	return types_go_proto.DataType_DT_INVALID
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GetShape() *tensor_shape_go_proto.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoteFusedGraphExecuteInfo)(nil), "tensorflow.RemoteFusedGraphExecuteInfo")
	proto.RegisterType((*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)(nil), "tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/remote_fused_graph_execute_info.proto", fileDescriptor_c15f13da5b37f691)
}

var fileDescriptor_c15f13da5b37f691 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x99, 0xad, 0x5d, 0xd9, 0x69, 0xf5, 0x30, 0xae, 0x12, 0x6a, 0x0d, 0x51, 0x11, 0x82,
	0x48, 0x8a, 0xdd, 0x83, 0x17, 0x41, 0x58, 0xba, 0x2e, 0x7b, 0x59, 0x4b, 0xdc, 0x93, 0x97, 0x61,
	0xb6, 0x79, 0x49, 0x83, 0x4d, 0x5e, 0x98, 0x4c, 0x5c, 0xd7, 0xb3, 0xf8, 0x7d, 0x3c, 0xfa, 0x0d,
	0x3c, 0x7a, 0xf4, 0x28, 0xfd, 0x14, 0x1e, 0x25, 0x33, 0x31, 0x9d, 0xc0, 0x6e, 0x41, 0xf0, 0x36,
	0xed, 0xfb, 0xfd, 0xdf, 0xfc, 0xdf, 0x3f, 0x6f, 0xe8, 0x2b, 0x05, 0x79, 0x89, 0x32, 0x5e, 0xe1,
	0xc5, 0x64, 0x81, 0x12, 0x26, 0xb1, 0x14, 0x19, 0x5c, 0xa0, 0x7c, 0x3f, 0x91, 0x90, 0xa1, 0x02,
	0x1e, 0x57, 0x25, 0x44, 0x3c, 0x91, 0xa2, 0x58, 0x72, 0xf8, 0x08, 0x8b, 0x4a, 0x01, 0x4f, 0xf3,
	0x18, 0x83, 0x42, 0xa2, 0x42, 0x46, 0x37, 0x0d, 0x46, 0x4f, 0xae, 0x6f, 0xa6, 0xf5, 0x46, 0x32,
	0x7a, 0x76, 0x3d, 0x66, 0x2a, 0xbc, 0x5c, 0x8a, 0x02, 0x1a, 0x7a, 0x4b, 0x53, 0x75, 0x59, 0x40,
	0x69, 0xb0, 0x47, 0x5f, 0xfb, 0xf4, 0x7e, 0xa8, 0x1d, 0xbf, 0xae, 0x0d, 0x1f, 0xd7, 0xf7, 0x1d,
	0x19, 0xbb, 0x27, 0x79, 0x8c, 0xec, 0x05, 0x1d, 0x36, 0x03, 0x69, 0x2b, 0x0e, 0xf1, 0x88, 0x3f,
	0x98, 0xee, 0x07, 0x9b, 0xee, 0x81, 0xd6, 0xcc, 0x20, 0x0e, 0x07, 0x86, 0xd4, 0xbf, 0xd9, 0x73,
	0x7a, 0xd7, 0x0c, 0x9f, 0xe6, 0x45, 0xa5, 0x78, 0x8e, 0x11, 0xf0, 0x5c, 0x64, 0xe0, 0xec, 0x78,
	0x3d, 0x7f, 0x2f, 0x64, 0xba, 0x78, 0x52, 0xd7, 0x4e, 0x31, 0x82, 0x53, 0x91, 0x01, 0x3b, 0xa0,
	0xf7, 0x8c, 0x04, 0x2b, 0xd5, 0xd5, 0xf4, 0xb4, 0xe6, 0x8e, 0xae, 0xbe, 0xd1, 0xc5, 0x56, 0xf4,
	0x98, 0xde, 0x32, 0xf1, 0xa2, 0x34, 0xec, 0x0d, 0x8f, 0xf8, 0x7b, 0xe1, 0xf0, 0xef, 0x9f, 0x1a,
	0x9a, 0x51, 0xb7, 0x04, 0x99, 0x8a, 0x55, 0xfa, 0x09, 0x22, 0xde, 0xf2, 0x85, 0xa8, 0x33, 0x51,
	0x20, 0x4b, 0xa7, 0xef, 0x11, 0x7f, 0x18, 0x8e, 0x37, 0xd4, 0x51, 0x03, 0xcd, 0x5b, 0x86, 0x7d,
	0x26, 0xd4, 0x8b, 0x20, 0x16, 0xd5, 0x4a, 0x71, 0x7b, 0x36, 0x3b, 0x7d, 0x67, 0xd7, 0xeb, 0xf9,
	0x83, 0xe9, 0x4b, 0x3b, 0xa0, 0x2d, 0xf9, 0x06, 0x67, 0x1a, 0x7b, 0x5b, 0x4b, 0xcf, 0x2e, 0x0b,
	0x98, 0xd7, 0x1f, 0x25, 0x1c, 0x37, 0xb7, 0x1c, 0xb7, 0x19, 0x59, 0x18, 0xfb, 0x42, 0xe8, 0xc3,
	0xae, 0x8d, 0x26, 0xaf, 0x8e, 0x8f, 0x9b, 0xff, 0xc1, 0xc7, 0x03, 0xdb, 0x87, 0xc9, 0xdd, 0xe2,
	0x46, 0x1f, 0xe8, 0xfe, 0x55, 0x32, 0xf6, 0x94, 0xf6, 0xa3, 0x7a, 0xc7, 0xf4, 0xb2, 0xdc, 0xee,
	0x2e, 0xcb, 0x4c, 0x28, 0x51, 0x93, 0xa1, 0x41, 0xd8, 0x94, 0xf6, 0x8d, 0xdf, 0x1d, 0xbd, 0x58,
	0x63, 0x9b, 0xb5, 0x9a, 0x1b, 0x3f, 0x06, 0x3d, 0xfc, 0x46, 0xbe, 0xaf, 0x5d, 0xf2, 0x63, 0xed,
	0x92, 0x9f, 0x6b, 0x97, 0xfc, 0x5a, 0xbb, 0x84, 0x3a, 0x28, 0x13, 0x5b, 0xda, 0x2e, 0xfb, 0xa1,
	0xb7, 0x65, 0x6a, 0xdd, 0x75, 0x4e, 0xde, 0xc5, 0x49, 0xaa, 0x96, 0xd5, 0x79, 0xb0, 0xc0, 0x6c,
	0x62, 0x3d, 0x9b, 0xab, 0x8f, 0x09, 0xfe, 0xe3, 0x8b, 0xe7, 0x09, 0x72, 0xfd, 0xd8, 0x7e, 0x13,
	0x72, 0xbe, 0xab, 0x4f, 0x07, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x61, 0xd5, 0xac, 0x19, 0x41,
	0x04, 0x00, 0x00,
}

func (m *RemoteFusedGraphExecuteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteFusedGraphExecuteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteFusedGraphExecuteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DefaultGraphOutputTensorShape) > 0 {
		for iNdEx := len(m.DefaultGraphOutputTensorShape) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultGraphOutputTensorShape[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultGraphInputTensorShape) > 0 {
		for iNdEx := len(m.DefaultGraphInputTensorShape) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultGraphInputTensorShape[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SerializedExecutorParameters) > 0 {
		i -= len(m.SerializedExecutorParameters)
		copy(dAtA[i:], m.SerializedExecutorParameters)
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.SerializedExecutorParameters)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExecutorName) > 0 {
		i -= len(m.ExecutorName)
		copy(dAtA[i:], m.ExecutorName)
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.ExecutorName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GraphOutputNodeName) > 0 {
		for iNdEx := len(m.GraphOutputNodeName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GraphOutputNodeName[iNdEx])
			copy(dAtA[i:], m.GraphOutputNodeName[iNdEx])
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.GraphOutputNodeName[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GraphInputNodeName) > 0 {
		for iNdEx := len(m.GraphInputNodeName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GraphInputNodeName[iNdEx])
			copy(dAtA[i:], m.GraphInputNodeName[iNdEx])
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.GraphInputNodeName[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RemoteGraph != nil {
		{
			size, err := m.RemoteGraph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Shape != nil {
		{
			size, err := m.Shape.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dtype != 0 {
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(m.Dtype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRemoteFusedGraphExecuteInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovRemoteFusedGraphExecuteInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RemoteFusedGraphExecuteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoteGraph != nil {
		l = m.RemoteGraph.Size()
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	if len(m.GraphInputNodeName) > 0 {
		for _, s := range m.GraphInputNodeName {
			l = len(s)
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	if len(m.GraphOutputNodeName) > 0 {
		for _, s := range m.GraphOutputNodeName {
			l = len(s)
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	l = len(m.ExecutorName)
	if l > 0 {
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	l = len(m.SerializedExecutorParameters)
	if l > 0 {
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	if len(m.DefaultGraphInputTensorShape) > 0 {
		for _, e := range m.DefaultGraphInputTensorShape {
			l = e.Size()
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	if len(m.DefaultGraphOutputTensorShape) > 0 {
		for _, e := range m.DefaultGraphOutputTensorShape {
			l = e.Size()
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dtype != 0 {
		n += 1 + sovRemoteFusedGraphExecuteInfo(uint64(m.Dtype))
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRemoteFusedGraphExecuteInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRemoteFusedGraphExecuteInfo(x uint64) (n int) {
	return sovRemoteFusedGraphExecuteInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RemoteFusedGraphExecuteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteFusedGraphExecuteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteFusedGraphExecuteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGraph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGraph == nil {
				m.RemoteGraph = &graph_go_proto.GraphDef{}
			}
			if err := m.RemoteGraph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphInputNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphInputNodeName = append(m.GraphInputNodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphOutputNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphOutputNodeName = append(m.GraphOutputNodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedExecutorParameters", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedExecutorParameters = append(m.SerializedExecutorParameters[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedExecutorParameters == nil {
				m.SerializedExecutorParameters = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGraphInputTensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGraphInputTensorShape = append(m.DefaultGraphInputTensorShape, &RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{})
			if err := m.DefaultGraphInputTensorShape[len(m.DefaultGraphInputTensorShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGraphOutputTensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGraphOutputTensorShape = append(m.DefaultGraphOutputTensorShape, &RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{})
			if err := m.DefaultGraphOutputTensorShape[len(m.DefaultGraphOutputTensorShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteFusedGraphExecuteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorShapeTypeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorShapeTypeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= types_go_proto.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &tensor_shape_go_proto.TensorShapeProto{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteFusedGraphExecuteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemoteFusedGraphExecuteInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRemoteFusedGraphExecuteInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRemoteFusedGraphExecuteInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRemoteFusedGraphExecuteInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemoteFusedGraphExecuteInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRemoteFusedGraphExecuteInfo = fmt.Errorf("proto: unexpected end of group")
)
