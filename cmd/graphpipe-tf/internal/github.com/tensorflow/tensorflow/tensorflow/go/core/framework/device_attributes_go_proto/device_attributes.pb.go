// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/device_attributes.proto

package device_attributes_go_proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterconnectLink struct {
	DeviceId             int32    `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Strength             int32    `protobuf:"varint,3,opt,name=strength,proto3" json:"strength,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterconnectLink) Reset()         { *m = InterconnectLink{} }
func (m *InterconnectLink) String() string { return proto.CompactTextString(m) }
func (*InterconnectLink) ProtoMessage()    {}
func (*InterconnectLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_74908851c78ce22e, []int{0}
}
func (m *InterconnectLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterconnectLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterconnectLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterconnectLink.Merge(m, src)
}
func (m *InterconnectLink) XXX_Size() int {
	return m.Size()
}
func (m *InterconnectLink) XXX_DiscardUnknown() {
	xxx_messageInfo_InterconnectLink.DiscardUnknown(m)
}

var xxx_messageInfo_InterconnectLink proto.InternalMessageInfo

func (m *InterconnectLink) GetDeviceId() int32 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *InterconnectLink) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InterconnectLink) GetStrength() int32 {
	if m != nil {
		return m.Strength
	}
	return 0
}

type LocalLinks struct {
	Link                 []*InterconnectLink `protobuf:"bytes,1,rep,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LocalLinks) Reset()         { *m = LocalLinks{} }
func (m *LocalLinks) String() string { return proto.CompactTextString(m) }
func (*LocalLinks) ProtoMessage()    {}
func (*LocalLinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_74908851c78ce22e, []int{1}
}
func (m *LocalLinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalLinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalLinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalLinks.Merge(m, src)
}
func (m *LocalLinks) XXX_Size() int {
	return m.Size()
}
func (m *LocalLinks) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalLinks.DiscardUnknown(m)
}

var xxx_messageInfo_LocalLinks proto.InternalMessageInfo

func (m *LocalLinks) GetLink() []*InterconnectLink {
	if m != nil {
		return m.Link
	}
	return nil
}

type DeviceLocality struct {
	// Optional bus locality of device.  Default value of 0 means
	// no specific locality.  Specific localities are indexed from 1.
	BusId int32 `protobuf:"varint,1,opt,name=bus_id,json=busId,proto3" json:"bus_id,omitempty"`
	// Optional NUMA locality of device.
	NumaNode int32 `protobuf:"varint,2,opt,name=numa_node,json=numaNode,proto3" json:"numa_node,omitempty"`
	// Optional local interconnect links to other devices.
	Links                *LocalLinks `protobuf:"bytes,3,opt,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeviceLocality) Reset()         { *m = DeviceLocality{} }
func (m *DeviceLocality) String() string { return proto.CompactTextString(m) }
func (*DeviceLocality) ProtoMessage()    {}
func (*DeviceLocality) Descriptor() ([]byte, []int) {
	return fileDescriptor_74908851c78ce22e, []int{2}
}
func (m *DeviceLocality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceLocality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DeviceLocality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceLocality.Merge(m, src)
}
func (m *DeviceLocality) XXX_Size() int {
	return m.Size()
}
func (m *DeviceLocality) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceLocality.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceLocality proto.InternalMessageInfo

func (m *DeviceLocality) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *DeviceLocality) GetNumaNode() int32 {
	if m != nil {
		return m.NumaNode
	}
	return 0
}

func (m *DeviceLocality) GetLinks() *LocalLinks {
	if m != nil {
		return m.Links
	}
	return nil
}

type DeviceAttributes struct {
	// Fully specified name of the device within a cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// String representation of device_type.
	DeviceType string `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// Memory capacity of device in bytes.
	MemoryLimit int64 `protobuf:"varint,4,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	// Platform-specific data about device that may be useful
	// for supporting efficient data transfers.
	Locality *DeviceLocality `protobuf:"bytes,5,opt,name=locality,proto3" json:"locality,omitempty"`
	// A device is assigned a global unique number each time it is
	// initialized. "incarnation" should never be 0.
	Incarnation uint64 `protobuf:"fixed64,6,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	// String representation of the physical device that this device maps to.
	PhysicalDeviceDesc   string   `protobuf:"bytes,7,opt,name=physical_device_desc,json=physicalDeviceDesc,proto3" json:"physical_device_desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceAttributes) Reset()         { *m = DeviceAttributes{} }
func (m *DeviceAttributes) String() string { return proto.CompactTextString(m) }
func (*DeviceAttributes) ProtoMessage()    {}
func (*DeviceAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_74908851c78ce22e, []int{3}
}
func (m *DeviceAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DeviceAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceAttributes.Merge(m, src)
}
func (m *DeviceAttributes) XXX_Size() int {
	return m.Size()
}
func (m *DeviceAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceAttributes proto.InternalMessageInfo

func (m *DeviceAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceAttributes) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceAttributes) GetMemoryLimit() int64 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *DeviceAttributes) GetLocality() *DeviceLocality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *DeviceAttributes) GetIncarnation() uint64 {
	if m != nil {
		return m.Incarnation
	}
	return 0
}

func (m *DeviceAttributes) GetPhysicalDeviceDesc() string {
	if m != nil {
		return m.PhysicalDeviceDesc
	}
	return ""
}

func init() {
	proto.RegisterType((*InterconnectLink)(nil), "tensorflow.InterconnectLink")
	proto.RegisterType((*LocalLinks)(nil), "tensorflow.LocalLinks")
	proto.RegisterType((*DeviceLocality)(nil), "tensorflow.DeviceLocality")
	proto.RegisterType((*DeviceAttributes)(nil), "tensorflow.DeviceAttributes")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/device_attributes.proto", fileDescriptor_74908851c78ce22e)
}

var fileDescriptor_74908851c78ce22e = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x19, 0xdb, 0xd4, 0xf6, 0x45, 0x64, 0x19, 0x74, 0x19, 0x56, 0xa9, 0xb1, 0xa7, 0x1c,
	0xa4, 0x5d, 0x57, 0xf0, 0x28, 0xb8, 0xec, 0xa5, 0x50, 0x64, 0x19, 0x3c, 0x88, 0x97, 0x90, 0x4c,
	0x66, 0xd3, 0xa1, 0xc9, 0xbc, 0x32, 0x33, 0x71, 0xe9, 0xc7, 0xf1, 0xdb, 0x78, 0xf4, 0xe8, 0x51,
	0xfa, 0x21, 0xc4, 0xa3, 0x64, 0xd2, 0x6d, 0xe2, 0x22, 0x78, 0x7b, 0xf9, 0xe7, 0xcd, 0x7b, 0xbf,
	0xf7, 0xe7, 0x0f, 0xaf, 0x9d, 0xd4, 0x16, 0xcd, 0x4d, 0x89, 0xb7, 0x0b, 0x81, 0x46, 0x2e, 0x6e,
	0x4c, 0x5a, 0xc9, 0x5b, 0x34, 0x9b, 0x45, 0x2e, 0xbf, 0x28, 0x21, 0x93, 0xd4, 0x39, 0xa3, 0xb2,
	0xda, 0x49, 0x3b, 0xdf, 0x1a, 0x74, 0x48, 0xa1, 0x7b, 0x32, 0x4b, 0xe0, 0x64, 0xa9, 0x9d, 0x34,
	0x02, 0xb5, 0x96, 0xc2, 0xad, 0x94, 0xde, 0xd0, 0x67, 0x30, 0x39, 0x3c, 0x55, 0x39, 0x23, 0x11,
	0x89, 0x03, 0x3e, 0x6e, 0x85, 0x65, 0x4e, 0x29, 0x0c, 0xdd, 0x6e, 0x2b, 0xd9, 0x83, 0x88, 0xc4,
	0x13, 0xee, 0x6b, 0x7a, 0x06, 0x63, 0xeb, 0x8c, 0xd4, 0x85, 0x5b, 0xb3, 0x41, 0xdb, 0x7f, 0xf7,
	0x3d, 0x7b, 0x07, 0xb0, 0x42, 0x91, 0x96, 0xcd, 0x64, 0x4b, 0xcf, 0x61, 0x58, 0x2a, 0xbd, 0x61,
	0x24, 0x1a, 0xc4, 0xe1, 0xc5, 0xf3, 0x79, 0x47, 0x32, 0xbf, 0x8f, 0xc1, 0x7d, 0xe7, 0xcc, 0xc0,
	0xe3, 0x2b, 0xbf, 0xdb, 0x4f, 0x51, 0x6e, 0x47, 0x9f, 0xc2, 0x28, 0xab, 0x6d, 0xc7, 0x16, 0x64,
	0xb5, 0x5d, 0xe6, 0x0d, 0xb5, 0xae, 0xab, 0x34, 0xd1, 0x98, 0xb7, 0x74, 0x01, 0x1f, 0x37, 0xc2,
	0x07, 0xcc, 0x25, 0x7d, 0x05, 0x41, 0x33, 0xcd, 0x7a, 0xbc, 0xf0, 0xe2, 0xb4, 0xbf, 0xb8, 0xc3,
	0xe3, 0x6d, 0xd3, 0xec, 0x17, 0x81, 0x93, 0x76, 0xe9, 0xfb, 0xa3, 0x77, 0xcd, 0xe1, 0x3a, 0xad,
	0xa4, 0x5f, 0x3a, 0xe1, 0xbe, 0xa6, 0x2f, 0x20, 0x3c, 0x38, 0xd5, 0xf3, 0x04, 0x5a, 0xe9, 0x63,
	0xe3, 0xcc, 0x4b, 0x78, 0x54, 0xc9, 0x0a, 0xcd, 0x2e, 0x29, 0x55, 0xa5, 0x1c, 0x1b, 0x46, 0x24,
	0x1e, 0xf0, 0xb0, 0xd5, 0x56, 0x8d, 0x44, 0xdf, 0xc2, 0xb8, 0x3c, 0x9c, 0xc6, 0x02, 0x4f, 0x77,
	0xd6, 0xa7, 0xfb, 0xfb, 0x78, 0x7e, 0xec, 0xa5, 0x11, 0x84, 0x4a, 0x8b, 0xd4, 0xe8, 0xd4, 0x29,
	0xd4, 0x6c, 0x14, 0x91, 0x78, 0xc4, 0xfb, 0x12, 0x3d, 0x87, 0x27, 0xdb, 0xf5, 0xce, 0x2a, 0x91,
	0x96, 0xc9, 0x01, 0x33, 0x97, 0x56, 0xb0, 0x87, 0x1e, 0x93, 0xde, 0xfd, 0x6b, 0x37, 0x5c, 0x49,
	0x2b, 0x2e, 0xbf, 0x92, 0x6f, 0xfb, 0x29, 0xf9, 0xbe, 0x9f, 0x92, 0x1f, 0xfb, 0x29, 0xf9, 0xb9,
	0x9f, 0x12, 0x60, 0x68, 0x8a, 0x3e, 0xcf, 0x31, 0x5e, 0x97, 0xa7, 0xf7, 0x2d, 0xba, 0x6e, 0xd2,
	0x65, 0xaf, 0xc9, 0xe7, 0x4f, 0x85, 0x72, 0xeb, 0x3a, 0x9b, 0x0b, 0xac, 0x16, 0xbd, 0x78, 0xfe,
	0xbb, 0x2c, 0xf0, 0xbf, 0xb9, 0x4d, 0x0a, 0x4c, 0x7c, 0x74, 0x7f, 0x13, 0x92, 0x8d, 0x7c, 0xf5,
	0xe6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x8c, 0xb2, 0xec, 0xf9, 0x02, 0x00, 0x00,
}

func (m *InterconnectLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterconnectLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterconnectLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Strength != 0 {
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(m.Strength))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceId != 0 {
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(m.DeviceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocalLinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalLinks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalLinks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Link) > 0 {
		for iNdEx := len(m.Link) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Link[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeviceAttributes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceLocality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceLocality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceLocality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Links != nil {
		{
			size, err := m.Links.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeviceAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NumaNode != 0 {
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(m.NumaNode))
		i--
		dAtA[i] = 0x10
	}
	if m.BusId != 0 {
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhysicalDeviceDesc) > 0 {
		i -= len(m.PhysicalDeviceDesc)
		copy(dAtA[i:], m.PhysicalDeviceDesc)
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(len(m.PhysicalDeviceDesc)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Incarnation != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Incarnation))
		i--
		dAtA[i] = 0x31
	}
	if m.Locality != nil {
		{
			size, err := m.Locality.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeviceAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MemoryLimit != 0 {
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(m.MemoryLimit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDeviceAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeviceAttributes(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeviceAttributes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterconnectLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != 0 {
		n += 1 + sovDeviceAttributes(uint64(m.DeviceId))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDeviceAttributes(uint64(l))
	}
	if m.Strength != 0 {
		n += 1 + sovDeviceAttributes(uint64(m.Strength))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalLinks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Link) > 0 {
		for _, e := range m.Link {
			l = e.Size()
			n += 1 + l + sovDeviceAttributes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceLocality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BusId != 0 {
		n += 1 + sovDeviceAttributes(uint64(m.BusId))
	}
	if m.NumaNode != 0 {
		n += 1 + sovDeviceAttributes(uint64(m.NumaNode))
	}
	if m.Links != nil {
		l = m.Links.Size()
		n += 1 + l + sovDeviceAttributes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeviceAttributes(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovDeviceAttributes(uint64(l))
	}
	if m.MemoryLimit != 0 {
		n += 1 + sovDeviceAttributes(uint64(m.MemoryLimit))
	}
	if m.Locality != nil {
		l = m.Locality.Size()
		n += 1 + l + sovDeviceAttributes(uint64(l))
	}
	if m.Incarnation != 0 {
		n += 9
	}
	l = len(m.PhysicalDeviceDesc)
	if l > 0 {
		n += 1 + l + sovDeviceAttributes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDeviceAttributes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeviceAttributes(x uint64) (n int) {
	return sovDeviceAttributes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterconnectLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterconnectLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterconnectLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strength", wireType)
			}
			m.Strength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalLinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalLinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalLinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = append(m.Link, &InterconnectLink{})
			if err := m.Link[len(m.Link)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceLocality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceLocality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceLocality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumaNode", wireType)
			}
			m.NumaNode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumaNode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Links == nil {
				m.Links = &LocalLinks{}
			}
			if err := m.Links.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryLimit", wireType)
			}
			m.MemoryLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locality == nil {
				m.Locality = &DeviceLocality{}
			}
			if err := m.Locality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incarnation", wireType)
			}
			m.Incarnation = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Incarnation = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalDeviceDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhysicalDeviceDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceAttributes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceAttributes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeviceAttributes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeviceAttributes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeviceAttributes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeviceAttributes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceAttributes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeviceAttributes = fmt.Errorf("proto: unexpected end of group")
)
